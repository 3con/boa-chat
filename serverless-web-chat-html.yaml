---
AWSTemplateFormatVersion: '2010-09-09'
Description: The S3 bucket for web chat static web resources.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Configuration
      Parameters:
      - LambdaPackageStackName
    ParameterLabels:
      LambdaPackageStackName:
        default: Lambda Package Stack Name
      LogRetentionDays:
        default: Log Retention (days)
Parameters:
  LambdaPackageStackName:
    Type: String
    Default: webchat-lambda-src
    Description: Name of the CloudFormation stack containing Lambda packages (deployed by boa-nimbus).
    MinLength: 1
  LogRetentionDays:
    Type: String
    Default: '14'
    AllowedValues:
    - ''
    - '1'
    - '3'
    - '5'
    - '7'
    - '14'
    - '30'
    - '60'
    - '90'
    - '120'
    - '150'
    - '180'
    - '365'
    - '400'
    - '545'
    - '731'
    - '1827'
    - '3653'
Resources:
  
  #
  #   S3 Bucket
  #   
  #   Hosts uploaded static web content (html, js, css).
  #
  
  ContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        ErrorDocument: error.html
        IndexDocument: index.html
  
  ContentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: ContentBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Principal: '*'
            Resource:
              Fn::Sub: arn:aws:s3:::${ContentBucket}/*
          - Action: s3:ListBucket
            Effect: Allow
            Principal: '*'
            Resource:
              Fn::Sub: arn:aws:s3:::${ContentBucket}
  
  
  #
  #   S3 Bucket Web Site Domain Formatter Function
  #   
  #   CloudFormation's Fn::GetAtt for an S3Bucket provides two attributes:
  #     * DomainName - DNS Name of the bucket
  #     * WebsiteURL - URL of the website endpoint for the bucket
  #   
  #   However, we want the domain name of the website endpoint for the bucket.
  #   It needs to be specified directly for API Gateway to properly proxy 
  #   requests to it.
  #   
  #   This Lambda function simply strips the domain name from the website URL 
  #   and returns it so it can be exported in the stack's outputs.
  #
  
  S3BucketWebSiteDomainFormatterFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Clears out the stack's S3 bucket
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - S3BucketWebSiteDomainFormatterFunctionRole
        - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/S3BucketWebSiteDomainFormatterFunction.zip
      Runtime: python2.7
      Timeout: '300'
  
  S3BucketWebSiteDomainFormatterFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  
  S3BucketWebSiteDomainFormatterFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3BucketWebSiteDomainFormatterFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${S3BucketWebSiteDomainFormatterFunction}:log-stream:*
      Roles:
      - Ref: S3BucketWebSiteDomainFormatterFunctionRole
  
  S3BucketWebSiteDomainFormatterFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${S3BucketWebSiteDomainFormatterFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  S3BucketWebSiteDomainRetrieval:
    Type: Custom::S3BucketWebSiteDomainRetrieval
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - S3BucketWebSiteDomainFormatterFunction
        - Arn
      WebsiteUrl:
        Fn::GetAtt:
          - ContentBucket
          - WebsiteURL
    DependsOn:
    - S3BucketWebSiteDomainFormatterFunctionLogGroup
    - S3BucketWebSiteDomainFormatterFunctionRoleActions
  
  #
  #   Stack Cleanup
  #   
  #   This function performs basic setup and cleanup functionality when the 
  #   stack is deleted.
  #   
  #   On delete:
  #     - Clears out shared S3 bucket
  #     - Deletes SNS topics
  #
  
  StackCleanupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Clears out the stack's S3 bucket
      Handler: index.lambda_handler
      MemorySize: 1024
      Role:
        Fn::GetAtt:
        - StackCleanupFunctionRole
        - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/StackCleanupFunction.zip
      Runtime: python2.7
      Timeout: '300'
  
  StackCleanupFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  
  StackCleanupFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: StackCleanupFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${StackCleanupFunction}:log-stream:*
        - Effect: Allow
          Action:
          - s3:DeleteObject
          Resource:
            Fn::Sub: arn:aws:s3:::${ContentBucket}/*
        - Effect: Allow
          Action:
          - s3:ListBucket
          Resource:
            Fn::Sub: arn:aws:s3:::${ContentBucket}
      Roles:
      - Ref: StackCleanupFunctionRole
  
  StackCleanupFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${StackCleanupFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  StackCleanupInvocation:
    Type: Custom::StackCleanupInvocation
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - StackCleanupFunction
        - Arn
      Bucket:
        Ref: ContentBucket
    DependsOn:
    - StackCleanupFunctionLogGroup
    - StackCleanupFunctionRoleActions
      
Outputs:
  S3Bucket:
    Value:
      Ref: ContentBucket
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-S3Bucket"
  S3BucketWebsiteDomainName:
    Value:
      Fn::GetAtt:
        - S3BucketWebSiteDomainRetrieval
        - WebsiteDomain
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-S3BucketWebsiteDomainName"
  S3BucketWebsiteUrl:
    Value:
      Fn::GetAtt:
        - ContentBucket
        - WebsiteURL
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-S3BucketWebsiteUrl"
