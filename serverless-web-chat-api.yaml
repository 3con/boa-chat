---
AWSTemplateFormatVersion: '2010-09-09'
Description: A serverless web chat portal.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Configuration
        Parameters:
          - EmailFromAddress
          - LambdaPackageStackName
          - MetricAlarmEmailAddress
          - PreWarmingEnabled
          - LogRetentionDays
    ParameterLabels:
      AdditionalCorsOrigins:
        default: HTTP CORS Origins Allowed
      EmailFromAddress:
        default: E-mail From Address
      LambdaPackageStackName:
        default: Lambda Package Stack Name
      LogRetentionDays:
        default: Log Retention (days)
      MetricAlarmEmailAddress:
        default: Alarm E-mail Address
      PreWarmingEnabled:
        default: Pre-Warming Enabled
        
Parameters:
  AdditionalCorsOrigins:
    Type: CommaDelimitedList
    Description: Comma-separated list of additional domains allowed access to the API. Leave blank for default only.
  EmailFromAddress:
    Type: String
    Description: The e-mail address from which user e-mail address verification messages should be sent. Leave blank for default.
  LambdaPackageStackName:
    Type: String
    Default: webchat-lambda-src
    Description: Name of the CloudFormation stack containing Lambda packages (deployed by boa-nimbus).
    MinLength: 1
  LogRetentionDays:
    Type: String
    Default: '14'
    AllowedValues:
      - ''
      - '1'
      - '3'
      - '5'
      - '7'
      - '14'
      - '30'
      - '60'
      - '90'
      - '120'
      - '150'
      - '180'
      - '365'
      - '400'
      - '545'
      - '731'
      - '1827'
      - '3653'
  MetricAlarmEmailAddress:
    Type: String
    Description: In case of errors. Leave blank to disable.
  PreWarmingEnabled:
    Type: String
    Description: Ping resources each minute to keep initial response times fast.
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'
      
Mappings:
  StaticVariables:
    Main:
      ApiGatewayCatchAllErrorSelectionPattern: '((.*http-status\":\s*500.*)|^(?!.*http-status)(\n|.)+)'
      ApiGatewayErrorMappingTemplate: |-
        #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
        #set ($bodyObj = $util.parseJson($input.body))
        {
            "message": "$util.escapeJavaScript($errorMessageObj.message).replaceAll("\\'","'")"
        }
      ApiGatewayServerErrorCatchAllTemplate: |-
        {
            "type": "InternalServerError",
            "message": "The backend server encountered an internal error."
        }
      ApiGatewayServerErrorTimeoutTemplate: |-
        {
            "type": "InternalServerTimeout",
            "message": "The backend server did not respond quickly enough."
        }
      CorsAllowedHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      DummyStageName: DummyStage
      PreWarmScheduleExpression: rate(1 minute)
      RobotsTxtContent: |-
        User-Agent: *
        Disallow: 
        Allow: /
      StageName: v1
      WebChatApiRoomResourceMethods: "'POST,OPTIONS'"
      WebChatApiSingleRoomMessageResourceMethods: "'POST,OPTIONS'"
      WebChatApiSingleRoomSessionResourceMethods: "'POST,OPTIONS'"
      WebChatApiSingleRoomSingleSessionMessageResourceMethods: "'GET,PUT,OPTIONS'"
      WebChatApiUserCredentialsResourceMethods: "'POST,OPTIONS'"
      WebChatApiUserRegisterResourceMethods: "'POST,OPTIONS'"
      WebChatApiUserRegistrationVerifyResourceMethods: "'GET,OPTIONS'"
      
Conditions:
  IncludeMetricAlarmsCondition:
    Fn::Not:
      - Fn::Equals:
        - Ref: MetricAlarmEmailAddress
        - ''
  PreWarmingEnabledCondition:
    Fn::Equals:
      - Ref: PreWarmingEnabled
      - 'Yes'
      
Resources:
  
  #
  #   S3 Bucket
  #   
  #   Shared among various resources.
  #
  
  SharedBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName:
        Fn::Sub: "webchat-sharedbucket-${WebChatApi}"
      LifecycleConfiguration:
        Rules:
          
          # Login request pointers should expire as soon as possible after 
          # 15 minutes. The 15 minute expiry will be verified separately, but 
          # this avoids needing a separate process for cleaning up these over 
          # time.
          - Id: LoginRequestPointerExpiration
            ExpirationInDays: 1
            Prefix: login-requests/
            Status: Enabled
            
  
  #  
  #   API Gateway - Global Account resources
  #  
  
  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: DenyCreatingOwnLogGroups
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Deny
                Action:
                  - logs:CreateLogGroup
                Resource:
                  - Fn::GetAtt:
                     - WebChatApiMainStageLogGroup
                     - Arn
                  - Fn::GetAtt:
                     - WebChatApiDummyStageLogGroup
                     - Arn
    DependsOn:
      - WebChatApiDummyStageLogGroup
      - WebChatApiMainStageLogGroup
  
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
          - ApiGatewayCloudWatchRole
          - Arn
  
  #  
  #   API Gateway - REST API resources
  #  
  
  WebChatApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Ref: AWS::StackName
      Description: REST API for web chats.
  
  WebChatApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: WebChatApi
      StageName:
        Fn::FindInMap:
          - StaticVariables
          - Main
          - DummyStageName
    DependsOn:
      - WebChatApiDummyStageLogGroup
      - WebChatApiRoomCreateMethod
      - WebChatApiUserRegistrationCreateMethod
      - WebChatApiUserRegistrationAliasVerificationCreateMethod
      - WebChatApiUserCredentialsCreateMethod
      - WebChatApiRoomMessageGetMethod
      - WebChatApiRoomMessagePostMethod
      - WebChatApiRoomResourceOptions
      - WebChatApiUserRegistrationResourceOptions
      - WebChatApiSingleRoomMessageResourceOptions
      - WebChatApiSingleRoomSessionResourceOptions
      - WebChatApiSingleRoomSingleSessionMessageResourceOptions
  
  WebChatApiDummyStageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub:
          - API-Gateway-Execution-Logs_${WebChatApi}/${DummyStageName}
          - DummyStageName:
              Fn::FindInMap:
                - StaticVariables
                - Main
                - DummyStageName
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: WebChatApiDeployment
      MethodSettings:
        - ResourcePath: ''
          HttpMethod: "*/*"
          DataTraceEnabled: true
          LoggingLevel: INFO
          MetricsEnabled:
            Fn::If:
              - IncludeMetricAlarmsCondition
              - true
              - false
      RestApiId:
        Ref: WebChatApi
      StageName:
        Fn::FindInMap:
          - StaticVariables
          - Main
          - StageName
    DependsOn:
      - WebChatApiMainStageLogGroup
  
  WebChatApiMainStageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub:
          - API-Gateway-Execution-Logs_${WebChatApi}/${MainStageName}
          - MainStageName:
              Fn::FindInMap:
                - StaticVariables
                - Main
                - StageName
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiBasicUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName:
        Fn::Sub: webchat-${WebChatApi}-basic
      Description: Default usage plan for web chat API
      Throttle:
        BurstLimit: 100
        RateLimit: 10
  
  WebChatApiRoomResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - WebChatApi
          - RootResourceId
      PathPart: room
      RestApiId:
        Ref: WebChatApi
  
  WebChatApiRoomResourceOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiRoomResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: 
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiRoomResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
  
  WebChatApiSingleRoomResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: WebChatApiRoomResource
      PathPart: '{room-id}'
      RestApiId:
        Ref: WebChatApi
  
  WebChatApiSingleRoomMessageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: WebChatApiSingleRoomResource
      PathPart: 'message'
      RestApiId:
        Ref: WebChatApi
  
  WebChatApiSingleRoomMessageResourceOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiSingleRoomMessageResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: 
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiSingleRoomMessageResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
  
  WebChatApiSingleRoomSessionResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: WebChatApiSingleRoomResource
      PathPart: 'session'
      RestApiId:
        Ref: WebChatApi
  
  WebChatApiSingleRoomSessionResourceOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiSingleRoomSessionResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: 
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiSingleRoomSessionResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
  
  WebChatApiSingleRoomSingleSessionResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: WebChatApiSingleRoomSessionResource
      PathPart: '{session-id}'
      RestApiId:
        Ref: WebChatApi
  
  WebChatApiSingleRoomSingleSessionMessageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: WebChatApiSingleRoomSingleSessionResource
      PathPart: 'message'
      RestApiId:
        Ref: WebChatApi
  
  WebChatApiSingleRoomSingleSessionMessageResourceOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiSingleRoomSingleSessionMessageResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: 
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiSingleRoomSingleSessionMessageResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
  
  WebChatApiUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - WebChatApi
          - RootResourceId
      PathPart: user
      RestApiId:
        Ref: WebChatApi
  
  WebChatApiUserRegisterResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: WebChatApiUserResource
      PathPart: register
      RestApiId:
        Ref: WebChatApi
  
  WebChatApiUserRegistrationResourceOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiUserRegisterResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: 
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiUserRegisterResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
  
  WebChatApiUserRegistrationVerifyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: WebChatApiUserRegisterResource
      PathPart: verify
      RestApiId:
        Ref: WebChatApi
  
  WebChatApiUserRegistrationVerifyResourceOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiUserRegistrationVerifyResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: 
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiUserRegistrationVerifyResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
  
  WebChatApiUserCredentialsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: WebChatApiUserResource
      PathPart: credentials
      RestApiId:
        Ref: WebChatApi
  
  WebChatApiUserLoginRequestResourceOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiUserCredentialsResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: 
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiUserCredentialsResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
  
  
  #
  #   SNS Delivery Status Resources
  #
  
  SNSFailureFeedbackRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sns.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: SNSFailureFeedbackRoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:PutMetricFilter
                Resource: '*'
  
  SNSSuccessFeedbackRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sns.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: SNSSuccessFeedbackRoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:PutMetricFilter
                Resource: '*'
  
  
  
  #  
  #   Room Generator Function
  #  
    
  RoomGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Generates a unique identifier for a chat room.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - RoomGeneratorFunctionRole
          - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/RoomGeneratorFunction.zip
      Runtime: python2.7
      Timeout: '300'
  
  RoomGeneratorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
  
  RoomGeneratorFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RoomGeneratorFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${RoomGeneratorFunction}:log-stream:*
          - Effect: Allow
            Action: 
              - sns:CreateTopic
            Resource: '*'
          - Effect: Allow
            Action: 
              - sns:SetTopicAttributes
            Resource: 
              Fn::Sub:
                - arn:aws:sns:${AWS::Region}:${AWS::AccountId}:web-chat-${WebChatApi}-${WebChatApiStageName}-*
                - WebChatApiStageName:
                    Fn::FindInMap:
                    - StaticVariables
                    - Main
                    - StageName
          - Effect: Allow
            Action: 
              - logs:CreateLogGroup
              - logs:PutMetricFilter
            Resource: 
              Fn::Sub:
                - arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:sns/${AWS::Region}/${AWS::AccountId}/web-chat-${WebChatApi}-${WebChatApiStageName}-*
                - WebChatApiStageName:
                    Fn::FindInMap:
                    - StaticVariables
                    - Main
                    - StageName
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource:
              Fn::Sub: arn:aws:s3:::${SharedBucket}/room-topics/*
          - Effect: Allow
            Action:
              - apigateway:GET
            Resource:
              Fn::Sub: arn:aws:apigateway:${AWS::Region}::/domainnames/*/basepathmappings
      Roles:
        - Ref: RoomGeneratorFunctionRole
  
  RoomGeneratorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${RoomGeneratorFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiRoomCreateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiRoomResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'
            SelectionPattern: ''
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiRoomResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
          - StatusCode: '500'
            SelectionPattern:
              Fn::FindInMap:
                - StaticVariables
                - Main
                - ApiGatewayCatchAllErrorSelectionPattern
            ResponseTemplates:
              application/json: 
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayServerErrorCatchAllTemplate
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiRoomResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
          - StatusCode: '504'
            SelectionPattern: ".*Task timed out after .*"
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayServerErrorTimeoutTemplate
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiRoomResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json:
            Fn::Sub:
              - |-
                #set($allParams = $input.params())
                {
                    "request-body": $input.json("$"),
                    "request-params" : {
                        #foreach($type in $allParams.keySet())
                        #set($params = $allParams.get($type))
                        "$type" : {
                            #foreach($paramName in $params.keySet())
                            "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                            #if($foreach.hasNext),#end
                            #end
                        }
                        #if($foreach.hasNext),#end
                        #end
                    },
                    "api-id": "$context.apiId",
                    "resource-path": "$context.resourcePath",
                    "stage": "$context.stage",
                    
                    "delete-function-role": "${CleanupFunctionRoleArn}",
                    "publish-function-role": "${PosterFunctionRoleArn}",
                    "subscribe-function-role": "${RoomSessionGeneratorFunctionRoleArn}",
                    "sns-failure-feedback-role": "${SNSFailureFeedbackRoleArn}",
                    "sns-success-feedback-role": "${SNSSuccessFeedbackRoleArn}"
                }
              - CleanupFunctionRoleArn:
                  Fn::GetAtt:
                    - StackCleanupFunctionRole
                    - Arn
                PosterFunctionRoleArn:
                  Fn::GetAtt:
                    - RoomMessagePosterFunctionRole
                    - Arn
                RoomSessionGeneratorFunctionRoleArn:
                  Fn::GetAtt:
                    - RoomSessionGeneratorFunctionRole
                    - Arn
                SNSFailureFeedbackRoleArn:
                  Fn::GetAtt:
                    - SNSFailureFeedbackRole
                    - Arn
                SNSSuccessFeedbackRoleArn:
                  Fn::GetAtt:
                    - SNSSuccessFeedbackRole
                    - Arn
        Type: AWS
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RoomGeneratorFunctionArn}/invocations
            - RoomGeneratorFunctionArn:
                Fn::GetAtt:
                  - RoomGeneratorFunction
                  - Arn
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '500'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '504'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
    DependsOn:
      - WebChatApiRoomCreateMethodRoomGeneratorLambdaPermission
  
  WebChatApiRoomCreateMethodRoomGeneratorLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomGeneratorFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/*/POST/room
    DependsOn:
      - RoomGeneratorFunctionRoleActions
      - RoomGeneratorFunctionLogGroup
  
  PreWarmApiCloudWatchRoomGeneratorFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: PreWarmingEnabledCondition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomGeneratorFunction
      Principal: 
        Fn::GetAtt:
          - PreWarmerFunctionRole
          - Arn
    DependsOn:
      - RoomGeneratorFunctionRoleActions
      - RoomGeneratorFunctionLogGroup
  
  
  
  #  
  #   User Login Request Handler Function
  #  
    
  UserRegistrationRequestHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Generates a unique identifier for a user.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - UserRegistrationRequestHandlerFunctionRole
          - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/UserRegistrationRequestHandlerFunction.zip
      Runtime: python2.7
      Timeout: '300'
  
  UserRegistrationRequestHandlerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
  
  UserRegistrationRequestHandlerFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: UserRegistrationRequestHandlerFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${UserRegistrationRequestHandlerFunction}:log-stream:*
      Roles:
        - Ref: UserRegistrationRequestHandlerFunctionRole
  
  UserRegistrationRequestHandlerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${UserRegistrationRequestHandlerFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiUserRegistrationCreateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiUserRegisterResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'
            SelectionPattern: ''
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiUserRegisterResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
          - StatusCode: '400'
            SelectionPattern: '.*http-status\":\s*400.*'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiUserRegisterResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayErrorMappingTemplate
          - StatusCode: '479'
            SelectionPattern: '.*http-status\":\s*479.*'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiUserRegisterResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayErrorMappingTemplate
          - StatusCode: '500'
            SelectionPattern:
              Fn::FindInMap:
                - StaticVariables
                - Main
                - ApiGatewayCatchAllErrorSelectionPattern
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayServerErrorCatchAllTemplate
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiUserRegisterResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
          - StatusCode: '504'
            SelectionPattern: ".*Task timed out after .*"
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayServerErrorTimeoutTemplate
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiUserRegisterResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json:
            Fn::Sub:
              - |-
                #set($allParams = $input.params())
                {
                    "request-body": $input.json("$"),
                    "request-params" : {
                        #foreach($type in $allParams.keySet())
                        #set($params = $allParams.get($type))
                        "$type" : {
                            #foreach($paramName in $params.keySet())
                            "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                            #if($foreach.hasNext),#end
                            #end
                        }
                        #if($foreach.hasNext),#end
                        #end
                    },
                    "api-id": "$context.apiId",
                    "resource-path": "$context.resourcePath",
                    "stage": "$context.stage",
                    
                    "cognito-user-pool-id": "${CognitoUserPoolId}",
                    "cognito-user-pool-client-id": "${CognitoUserPoolClientId}",
                    "cognito-user-pool-client-secret": "${CognitoUserPoolClientSecret}"
                }
              - CognitoUserPoolId:
                  Fn::GetAtt:
                    - CognitoUserPoolResourceInvocation
                    - CognitoUserPoolId
                CognitoUserPoolClientId:
                  Fn::GetAtt:
                    - CognitoUserPoolResourceInvocation
                    - CognitoUserPoolClientId
                CognitoUserPoolClientSecret:
                  Fn::GetAtt:
                    - CognitoUserPoolResourceInvocation
                    - CognitoUserPoolClientSecret
        Type: AWS
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserRegistrationRequestHandlerFunctionArn}/invocations
            - UserRegistrationRequestHandlerFunctionArn:
                Fn::GetAtt:
                  - UserRegistrationRequestHandlerFunction
                  - Arn
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '400'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '479'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '500'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '504'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
    DependsOn:
      - WebChatApiUserRegistrationCreateMethodUserRegistrationRequestHandlerLambdaPermission
  
  WebChatApiUserRegistrationCreateMethodUserRegistrationRequestHandlerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: UserRegistrationRequestHandlerFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/*/POST/user/register
    DependsOn:
      - UserRegistrationRequestHandlerFunctionRoleActions
      - UserRegistrationRequestHandlerFunctionLogGroup
  
  PreWarmApiCloudWatchUserRegistrationRequestHandlerFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: PreWarmingEnabledCondition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: UserRegistrationRequestHandlerFunction
      Principal: 
        Fn::GetAtt:
          - PreWarmerFunctionRole
          - Arn
    DependsOn:
      - UserRegistrationRequestHandlerFunctionRoleActions
      - UserRegistrationRequestHandlerFunctionLogGroup
  
  
  
  #  
  #   User Login Response Handler Function
  #  
    
  UserRegistrationAliasVerificationHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Generates a unique identifier for a user.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - UserRegistrationAliasVerificationHandlerFunctionRole
          - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/UserRegistrationAliasVerificationHandlerFunction.zip
      Runtime: python2.7
      Timeout: '300'
  
  UserRegistrationAliasVerificationHandlerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
  
  UserRegistrationAliasVerificationHandlerFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: UserRegistrationAliasVerificationHandlerFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${UserRegistrationAliasVerificationHandlerFunction}:log-stream:*
      Roles:
        - Ref: UserRegistrationAliasVerificationHandlerFunctionRole
  
  UserRegistrationAliasVerificationHandlerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${UserRegistrationAliasVerificationHandlerFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiUserRegistrationAliasVerificationCreateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiUserRegistrationVerifyResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'
            SelectionPattern: ''
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiUserRegistrationVerifyResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
          - StatusCode: '400'
            SelectionPattern: '.*http-status\":\s*400.*'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiUserRegistrationVerifyResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayErrorMappingTemplate
          - StatusCode: '404'
            SelectionPattern: '.*http-status\":\s*404.*'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiUserRegistrationVerifyResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayErrorMappingTemplate
          - StatusCode: '500'
            SelectionPattern:
              Fn::FindInMap:
                - StaticVariables
                - Main
                - ApiGatewayCatchAllErrorSelectionPattern
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayServerErrorCatchAllTemplate
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiUserRegistrationVerifyResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
          - StatusCode: '504'
            SelectionPattern: ".*Task timed out after .*"
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayServerErrorTimeoutTemplate
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiUserRegistrationVerifyResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json:
            Fn::Sub:
              - |-
                #set($allParams = $input.params())
                {
                    "request-body": $input.json("$"),
                    "request-params" : {
                        #foreach($type in $allParams.keySet())
                        #set($params = $allParams.get($type))
                        "$type" : {
                            #foreach($paramName in $params.keySet())
                            "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                            #if($foreach.hasNext),#end
                            #end
                        }
                        #if($foreach.hasNext),#end
                        #end
                    },
                    "api-id": "$context.apiId",
                    "resource-path": "$context.resourcePath",
                    "stage": "$context.stage",
                  
                    "cognito-user-pool-id": "${CognitoUserPoolId}",
                    "cognito-user-pool-client-id": "${CognitoUserPoolClientId}",
                    "cognito-user-pool-client-secret": "${CognitoUserPoolClientSecret}"
                }
              - CognitoUserPoolId:
                  Fn::GetAtt:
                    - CognitoUserPoolResourceInvocation
                    - CognitoUserPoolId
                CognitoUserPoolClientId:
                  Fn::GetAtt:
                    - CognitoUserPoolResourceInvocation
                    - CognitoUserPoolClientId
                CognitoUserPoolClientSecret:
                  Fn::GetAtt:
                    - CognitoUserPoolResourceInvocation
                    - CognitoUserPoolClientSecret
        Type: AWS
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserRegistrationAliasVerificationHandlerFunctionArn}/invocations
            - UserRegistrationAliasVerificationHandlerFunctionArn:
                Fn::GetAtt:
                  - UserRegistrationAliasVerificationHandlerFunction
                  - Arn
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '400'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '404'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '500'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '504'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
    DependsOn:
      - WebChatApiUserRegistrationAliasVerificationCreateMethodUserRegistrationAliasVerificationHandlerLambdaPermission
  
  WebChatApiUserRegistrationAliasVerificationCreateMethodUserRegistrationAliasVerificationHandlerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: UserRegistrationAliasVerificationHandlerFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/*/GET/user/register/verify
    DependsOn:
      - UserRegistrationAliasVerificationHandlerFunctionRoleActions
      - UserRegistrationAliasVerificationHandlerFunctionLogGroup
  
  PreWarmApiCloudWatchUserRegistrationAliasVerificationHandlerFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: PreWarmingEnabledCondition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: UserRegistrationAliasVerificationHandlerFunction
      Principal: 
        Fn::GetAtt:
          - PreWarmerFunctionRole
          - Arn
    DependsOn:
      - UserRegistrationAliasVerificationHandlerFunctionRoleActions
      - UserRegistrationAliasVerificationHandlerFunctionLogGroup
  
  
  
  #  
  #   User Credentials Generator Function
  #  
    
  UserCredentialsGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Generates a unique identifier for a user.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - UserCredentialsGeneratorFunctionRole
          - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/UserCredentialsGeneratorFunction.zip
      Runtime: python2.7
      Timeout: '300'
  
  UserCredentialsGeneratorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
  
  UserCredentialsGeneratorFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: UserCredentialsGeneratorFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${UserCredentialsGeneratorFunction}:log-stream:*
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              Fn::Sub: arn:aws:s3:::${SharedBucket}/api-key-user/*
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              Fn::Sub: arn:aws:s3:::${SharedBucket}
      Roles:
        - Ref: UserCredentialsGeneratorFunctionRole
  
  UserCredentialsGeneratorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${UserCredentialsGeneratorFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiUserCredentialsCreateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: true
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiUserCredentialsResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'
            SelectionPattern: ''
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiUserCredentialsResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
          - StatusCode: '400'
            SelectionPattern: '.*http-status\":\s*400.*'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiUserCredentialsResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayErrorMappingTemplate
          - StatusCode: '403'
            SelectionPattern: '.*http-status\":\s*403.*'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiUserCredentialsResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayErrorMappingTemplate
          - StatusCode: '500'
            SelectionPattern:
              Fn::FindInMap:
                - StaticVariables
                - Main
                - ApiGatewayCatchAllErrorSelectionPattern
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayServerErrorCatchAllTemplate
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiUserCredentialsResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
          - StatusCode: '504'
            SelectionPattern: ".*Task timed out after .*"
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayServerErrorTimeoutTemplate
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiUserCredentialsResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json:
            Fn::Sub: |-
              #set($allParams = $input.params())
              {
                  "request-body": $input.json("$"),
                  "request-params" : {
                      #foreach($type in $allParams.keySet())
                      #set($params = $allParams.get($type))
                      "$type" : {
                          #foreach($paramName in $params.keySet())
                          "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                          #if($foreach.hasNext),#end
                          #end
                      }
                      #if($foreach.hasNext),#end
                      #end
                  },
                  "api-id": "$context.apiId",
                  "resource-path": "$context.resourcePath",
                  "stage": "$context.stage",
                  
                  "api-key": "$context.identity.apiKey",
                  "shared-bucket": "${SharedBucket}"
              }
        Type: AWS
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserCredentialsGeneratorFunctionArn}/invocations
            - UserCredentialsGeneratorFunctionArn:
                Fn::GetAtt:
                  - UserCredentialsGeneratorFunction
                  - Arn
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '400'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '403'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '500'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '504'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
    DependsOn:
      - WebChatApiUserCredentialsCreateMethodUserCredentialsGeneratorLambdaPermission
  
  WebChatApiUserCredentialsCreateMethodUserCredentialsGeneratorLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: UserCredentialsGeneratorFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/*/POST/user/credentials
    DependsOn:
      - UserCredentialsGeneratorFunctionRoleActions
      - UserCredentialsGeneratorFunctionLogGroup
  
  PreWarmApiCloudWatchUserCredentialsGeneratorFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: PreWarmingEnabledCondition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: UserCredentialsGeneratorFunction
      Principal: 
        Fn::GetAtt:
          - PreWarmerFunctionRole
          - Arn
    DependsOn:
      - UserCredentialsGeneratorFunctionRoleActions
      - UserCredentialsGeneratorFunctionLogGroup
  
  
  
  #  
  #   Room Session ID Generator Function
  #  
    
  RoomSessionGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Generates a unique identifier for a user.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - RoomSessionGeneratorFunctionRole
          - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/RoomSessionGeneratorFunction.zip
      Runtime: python2.7
      Timeout: '300'
  
  RoomSessionGeneratorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
  
  RoomSessionGeneratorFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RoomSessionGeneratorFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${RoomSessionGeneratorFunction}:log-stream:*
          - Effect: Allow
            Action:
              - sqs:CreateQueue
              - sqs:GetQueueAttributes
            Resource: '*'
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              Fn::Sub: arn:aws:s3:::${SharedBucket}/room-topics/*
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource:
              Fn::Sub: arn:aws:s3:::${SharedBucket}/room-queues/*
          - Effect: Allow
            Action:
              - apigateway:GET
            Resource:
              Fn::Sub: arn:aws:apigateway:${AWS::Region}::/domainnames/*/basepathmappings
      Roles:
        - Ref: RoomSessionGeneratorFunctionRole
  
  RoomSessionGeneratorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${RoomSessionGeneratorFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiRoomSessionCreateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiSingleRoomSessionResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'
            SelectionPattern: ''
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiSingleRoomSessionResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
          - StatusCode: '400'
            SelectionPattern: '.*http-status\":\s*400.*'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiSingleRoomSessionResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayErrorMappingTemplate
          - StatusCode: '500'
            SelectionPattern:
              Fn::FindInMap:
                - StaticVariables
                - Main
                - ApiGatewayCatchAllErrorSelectionPattern
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayServerErrorCatchAllTemplate
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiSingleRoomSessionResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
          - StatusCode: '504'
            SelectionPattern: ".*Task timed out after .*"
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayServerErrorTimeoutTemplate
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiSingleRoomSessionResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json:
            Fn::Sub: 
              - |-
                #set($allParams = $input.params())
                {
                    "request-body": $input.json("$"),
                    "request-params" : {
                        #foreach($type in $allParams.keySet())
                        #set($params = $allParams.get($type))
                        "$type" : {
                            #foreach($paramName in $params.keySet())
                            "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                            #if($foreach.hasNext),#end
                            #end
                        }
                        #if($foreach.hasNext),#end
                        #end
                    },
                    "api-id": "$context.apiId",
                    "resource-path": "$context.resourcePath",
                    "stage": "$context.stage",
                  
                    "acknowledger-function-role": "${AcknowledgerFunctionRoleArn}",
                    "delete-function-role": "${StackCleanupFunctionRoleArn}",
                    "poller-function-role": "${PollerFunctionRoleArn}"
                }
              - AcknowledgerFunctionRoleArn:
                  Fn::GetAtt:
                    - RoomMessageAcknowledgerFunctionRole
                    - Arn
                PollerFunctionRoleArn:
                  Fn::GetAtt:
                    - RoomMessagePollerFunctionRole
                    - Arn
                StackCleanupFunctionRoleArn:
                  Fn::GetAtt:
                    - StackCleanupFunctionRole
                    - Arn
        Type: AWS
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RoomSessionGeneratorFunctionArn}/invocations
            - RoomSessionGeneratorFunctionArn:
                Fn::GetAtt:
                  - RoomSessionGeneratorFunction
                  - Arn
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '400'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '500'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '504'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
    DependsOn:
      - WebChatApiRoomSessionCreateMethodRoomSessionGeneratorLambdaPermission
  
  WebChatApiRoomSessionCreateMethodRoomSessionGeneratorLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomSessionGeneratorFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/*/POST/room/{room-id}/session
    DependsOn:
      - RoomSessionGeneratorFunctionRoleActions
      - RoomSessionGeneratorFunctionLogGroup
  
  PreWarmApiCloudWatchRoomSessionGeneratorFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: PreWarmingEnabledCondition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomSessionGeneratorFunction
      Principal: 
        Fn::GetAtt:
          - PreWarmerFunctionRole
          - Arn
    DependsOn:
      - RoomSessionGeneratorFunctionRoleActions
      - RoomSessionGeneratorFunctionLogGroup
  
  
  #  
  #   Room Message Poller Function
  #  
    
  RoomMessagePollerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Returns any new messages sent to the requested room.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - RoomMessagePollerFunctionRole
          - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/RoomMessagePollerFunction.zip
      Runtime: python2.7
      Timeout: '300'
  
  RoomMessagePollerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
  
  RoomMessagePollerFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RoomMessagePollerFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${RoomMessagePollerFunction}:log-stream:*
      Roles:
        - Ref: RoomMessagePollerFunctionRole
  
  RoomMessagePollerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${RoomMessagePollerFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiRoomMessageGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiSingleRoomSingleSessionMessageResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'
            SelectionPattern: ''
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiSingleRoomSingleSessionMessageResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
          - StatusCode: '400'
            SelectionPattern: '.*http-status\":\s*400.*'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiSingleRoomSingleSessionMessageResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayErrorMappingTemplate
          - StatusCode: '500'
            SelectionPattern: 
              Fn::FindInMap:
                - StaticVariables
                - Main
                - ApiGatewayCatchAllErrorSelectionPattern
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiSingleRoomSingleSessionMessageResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayServerErrorCatchAllTemplate
          - StatusCode: '504'
            SelectionPattern: ".*Task timed out after .*"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiSingleRoomSingleSessionMessageResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayServerErrorTimeoutTemplate
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json:
            Fn::Sub: |-
              #set($allParams = $input.params())
              {
                  "request-body": $input.json("$"),
                  "request-params" : {
                      #foreach($type in $allParams.keySet())
                      #set($params = $allParams.get($type))
                      "$type" : {
                          #foreach($paramName in $params.keySet())
                          "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                          #if($foreach.hasNext),#end
                          #end
                      }
                      #if($foreach.hasNext),#end
                      #end
                  },
                  "api-id": "$context.apiId",
                  "resource-path": "$context.resourcePath",
                  "stage": "$context.stage"
              }
        Type: AWS
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RoomMessagePollerFunctionArn}/invocations
            - RoomMessagePollerFunctionArn:
                Fn::GetAtt:
                  - RoomMessagePollerFunction
                  - Arn
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '400'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '500'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '504'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
    DependsOn:
      - WebChatApiRoomMessageGetMethodRoomMessagePollerLambdaPermission
  
  WebChatApiRoomMessageGetMethodRoomMessagePollerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomMessagePollerFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/*/GET/room/{room-id}/session/{session-id}/message
    DependsOn:
      - RoomMessagePollerFunctionRoleActions
      - RoomMessagePollerFunctionLogGroup
  
  PreWarmApiCloudWatchRoomMessagePollerFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: PreWarmingEnabledCondition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomMessagePollerFunction
      Principal:
        Fn::GetAtt:
          - PreWarmerFunctionRole
          - Arn
    DependsOn:
      - RoomMessagePollerFunctionRoleActions
      - RoomMessagePollerFunctionLogGroup
  
  
  
  #  
  #   Room Message Acknowledger Function
  #  
    
  RoomMessageAcknowledgerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Returns any new messages sent to the requested room.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - RoomMessageAcknowledgerFunctionRole
          - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/RoomMessageAcknowledgerFunction.zip
      Runtime: python2.7
      Timeout: '300'
  
  RoomMessageAcknowledgerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
  
  RoomMessageAcknowledgerFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RoomMessageAcknowledgerFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${RoomMessageAcknowledgerFunction}:log-stream:*
      Roles:
        - Ref: RoomMessageAcknowledgerFunctionRole
  
  RoomMessageAcknowledgerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${RoomMessageAcknowledgerFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiRoomMessageAcknowledgeMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiSingleRoomSingleSessionMessageResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: PUT
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'
            SelectionPattern: ''
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiSingleRoomSingleSessionMessageResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
          - StatusCode: '400'
            SelectionPattern: '.*http-status\":\s*400.*'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiSingleRoomSingleSessionMessageResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                - StaticVariables
                - Main
                - ApiGatewayErrorMappingTemplate
          - StatusCode: '500'
            SelectionPattern:
              Fn::FindInMap:
                - StaticVariables
                - Main
                - ApiGatewayCatchAllErrorSelectionPattern
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiSingleRoomSingleSessionMessageResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayServerErrorCatchAllTemplate
          - StatusCode: '504'
            SelectionPattern: ".*Task timed out after .*"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiSingleRoomSingleSessionMessageResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayServerErrorTimeoutTemplate
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json:
            Fn::Sub: |-
              #set($allParams = $input.params())
              {
                  "request-body": $input.json("$"),
                  "request-params" : {
                      #foreach($type in $allParams.keySet())
                      #set($params = $allParams.get($type))
                      "$type" : {
                          #foreach($paramName in $params.keySet())
                          "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                          #if($foreach.hasNext),#end
                          #end
                      }
                      #if($foreach.hasNext),#end
                      #end
                  },
                  "api-id": "$context.apiId",
                  "resource-path": "$context.resourcePath",
                  "stage": "$context.stage"
              }
        Type: AWS
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RoomMessageAcknowledgerFunctionArn}/invocations
            - RoomMessageAcknowledgerFunctionArn:
                Fn::GetAtt:
                  - RoomMessageAcknowledgerFunction
                  - Arn
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '400'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '500'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '504'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
    DependsOn:
      - WebChatApiRoomMessageAcknowledgeMethodRoomMessageAcknowledgerLambdaPermission
  
  WebChatApiRoomMessageAcknowledgeMethodRoomMessageAcknowledgerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomMessageAcknowledgerFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/*/PUT/room/{room-id}/session/{session-id}/message
    DependsOn:
      - RoomMessageAcknowledgerFunctionRoleActions
      - RoomMessageAcknowledgerFunctionLogGroup
  
  PreWarmApiCloudWatchRoomMessageAcknowledgerFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: PreWarmingEnabledCondition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomMessageAcknowledgerFunction
      Principal:
        Fn::GetAtt:
          - PreWarmerFunctionRole
          - Arn
    DependsOn:
      - RoomMessageAcknowledgerFunctionRoleActions
      - RoomMessageAcknowledgerFunctionLogGroup
  
  
  #  
  #   Room Message Poster Function
  #  
    
  RoomMessagePosterFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Returns any new messages sent to the requested room.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - RoomMessagePosterFunctionRole
          - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/RoomMessagePosterFunction.zip
      Runtime: python2.7
      Timeout: '300'
  
  RoomMessagePosterFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
  
  RoomMessagePosterFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RoomMessagePosterFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${RoomMessagePosterFunction}:log-stream:*
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              Fn::Sub: arn:aws:s3:::${SharedBucket}/room-topics/*
      Roles:
        - Ref: RoomMessagePosterFunctionRole
  
  RoomMessagePosterFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${RoomMessagePosterFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiRoomMessagePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiSingleRoomMessageResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'
            SelectionPattern: ''
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiSingleRoomMessageResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
          - StatusCode: '400'
            SelectionPattern: '.*http-status\":\s*400.*'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiSingleRoomMessageResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayErrorMappingTemplate
          - StatusCode: '403'
            SelectionPattern: '.*http-status\":\s*403.*'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiSingleRoomMessageResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayErrorMappingTemplate
          - StatusCode: '500'
            SelectionPattern:
              Fn::FindInMap:
                - StaticVariables
                - Main
                - ApiGatewayCatchAllErrorSelectionPattern
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiSingleRoomMessageResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayServerErrorCatchAllTemplate
          - StatusCode: '504'
            SelectionPattern: ".*Task timed out after .*"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::GetAtt:
                  - CorsOriginCombinerInvocation
                  - ApiGatewayCorsOriginHeaderMapping
              method.response.header.Access-Control-Allow-Methods:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - WebChatApiSingleRoomMessageResourceMethods
              method.response.header.Access-Control-Allow-Headers:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - CorsAllowedHeaders
            ResponseTemplates:
              application/json:
                Fn::FindInMap:
                  - StaticVariables
                  - Main
                  - ApiGatewayServerErrorTimeoutTemplate
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json:
            Fn::Sub: |-
              #set($allParams = $input.params())
              {
                  "request-body": $input.json("$"),
                  "request-params" : {
                      #foreach($type in $allParams.keySet())
                      #set($params = $allParams.get($type))
                      "$type" : {
                          #foreach($paramName in $params.keySet())
                          "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                          #if($foreach.hasNext),#end
                          #end
                      }
                      #if($foreach.hasNext),#end
                      #end
                  },
                  "api-id": "$context.apiId",
                  "resource-path": "$context.resourcePath",
                  "stage": "$context.stage"
              }
        Type: AWS
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RoomMessagePosterFunctionArn}/invocations
            - RoomMessagePosterFunctionArn:
                Fn::GetAtt:
                  - RoomMessagePosterFunction
                  - Arn
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '400'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '403'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '500'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
        - StatusCode: '504'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false
      RequestParameters:
        method.request.querystring.user-id: true
    DependsOn:
      - WebChatApiRoomMessagePostMethodRoomMessagePosterLambdaPermission
  
  WebChatApiRoomMessagePostMethodRoomMessagePosterLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomMessagePosterFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/*/POST/room/{room-id}/message
    DependsOn:
      - RoomMessagePosterFunctionRoleActions
      - RoomMessagePosterFunctionLogGroup
  
  PreWarmApiCloudWatchRoomMessagePosterFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: PreWarmingEnabledCondition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomMessagePosterFunction
      Principal:
        Fn::GetAtt:
          - PreWarmerFunctionRole
          - Arn
    DependsOn:
      - RoomMessagePosterFunctionRoleActions
      - RoomMessagePosterFunctionLogGroup
  
  
  
  
  #
  #   CORS Origin Combiner Function
  #   
  #   Returns an appropriate value for an API Gateway header mapping for the 
  #   Access-Control-Allowed-Origin header.
  #
  
  CorsOriginCombinerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Performs cleanup of associated resources on stack deletion.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - CorsOriginCombinerFunctionRole
          - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/CorsOriginCombinerFunction.zip
      Runtime: python2.7
      Timeout: '300'
  
  CorsOriginCombinerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
  
  CorsOriginCombinerFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CorsOriginCombinerFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CorsOriginCombinerFunction}:log-stream:*
      Roles:
        - Ref: CorsOriginCombinerFunctionRole
  
  CorsOriginCombinerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${CorsOriginCombinerFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  CorsOriginCombinerInvocation:
    Type: Custom::CorsOriginCombinerInvocation
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CorsOriginCombinerFunction
          - Arn
      AdditionalCorsOrigins:
        Ref: AdditionalCorsOrigins
      BucketWebsiteUrl:
        Fn::GetAtt:
          - StaticContentBucket
          - WebsiteURL
    DependsOn:
      - CorsOriginCombinerFunctionLogGroup
      - CorsOriginCombinerFunctionRoleActions
      
  
  
  #
  #   CloudWatch Alarms
  #
  
  AdminAlarmTopic:
    Type: AWS::SNS::Topic
    Condition: IncludeMetricAlarmsCondition
    Properties:
      Subscription:
        - Endpoint:
            Ref: MetricAlarmEmailAddress
          Protocol: email
  
  LambdaThrottlesAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IncludeMetricAlarmsCondition
    Properties:
      Namespace: AWS/Lambda
      MetricName: Throttles
      EvaluationPeriods: 1
      Period: 60
      Statistic: Sum
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - Ref: AdminAlarmTopic
  
  RoomGeneratorErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IncludeMetricAlarmsCondition
    Properties:
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: RoomGeneratorFunction
      MetricName: Errors
      EvaluationPeriods: 1
      Period: 60
      Statistic: Sum
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - Ref: AdminAlarmTopic
  
  Api5XXErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IncludeMetricAlarmsCondition
    Properties:
      Namespace: AWS/ApiGateway
      Dimensions:
        - Name: ApiName
          Value:
            Ref: AWS::StackName
        - Name: Stage
          Value:
            Ref: WebChatApiStage
      MetricName: 5XXError
      EvaluationPeriods: 1
      Period: 60
      Statistic: Average
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - Ref: AdminAlarmTopic
  
  
  #
  #   Pre-Warming
  #   
  #   This function allows for prewarming an arbitrary number of other 
  #   Lambda functions through a single CloudWatch event rule and target.
  #
  
  PreWarmerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Queues up Lambda function invocations for later execution.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - PreWarmerFunctionRole
          - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/PreWarmerFunction.zip
      Runtime: python2.7
      Timeout: '300'
  
  PreWarmerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
  
  PreWarmerFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: PreWarmerFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${PreWarmerFunction}:log-stream:*
      Roles:
        - Ref: PreWarmerFunctionRole
  
  PreWarmerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${PreWarmerFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  PreWarmApiCloudWatchPreWarmerFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: PreWarmingEnabledCondition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: PreWarmerFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - PreWarmApiEventRule
          - Arn
    DependsOn:
      - PreWarmerFunctionRoleActions
      - PreWarmerFunctionLogGroup
  
  PreWarmApiEventRule:
    Type: AWS::Events::Rule
    Condition: PreWarmingEnabledCondition
    Properties:
      Description: Keeps web chat API Lambda functions warm by invoking them frequently.
      ScheduleExpression:
        Fn::FindInMap:
          - StaticVariables
          - Main
          - PreWarmScheduleExpression
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - PreWarmerFunction
              - Arn
          Id: PreWarmerFunction
          Input:
            Fn::Sub:
              - |-
                {
                    "function-arns": [
                        "${RoomGeneratorFunctionArn}",
                        "${UserRegistrationRequestHandlerFunctionArn}",
                        "${UserRegistrationAliasVerificationHandlerFunctionArn}",
                        "${UserCredentialsGeneratorFunctionArn}",
                        "${RoomSessionGeneratorFunctionArn}",
                        "${RoomMessagePollerFunctionArn}",
                        "${RoomMessageAcknowledgerFunctionArn}",
                        "${RoomMessagePosterFunctionArn}",
                        "${CognitoUserPostConfirmationTriggerFunctionArn}"
                    ],
                    "payload": {
                        "warming": true
                    }
                }
              - RoomGeneratorFunctionArn:
                  Fn::GetAtt:
                    - RoomGeneratorFunction
                    - Arn
                UserRegistrationRequestHandlerFunctionArn:
                  Fn::GetAtt:
                    - UserRegistrationRequestHandlerFunction
                    - Arn
                UserRegistrationAliasVerificationHandlerFunctionArn:
                  Fn::GetAtt:
                    - UserRegistrationAliasVerificationHandlerFunction
                    - Arn
                UserCredentialsGeneratorFunctionArn:
                  Fn::GetAtt:
                    - UserCredentialsGeneratorFunction
                    - Arn
                RoomSessionGeneratorFunctionArn:
                  Fn::GetAtt:
                    - RoomSessionGeneratorFunction
                    - Arn
                RoomMessagePollerFunctionArn:
                  Fn::GetAtt:
                    - RoomMessagePollerFunction
                    - Arn
                RoomMessageAcknowledgerFunctionArn:
                  Fn::GetAtt:
                    - RoomMessageAcknowledgerFunction
                    - Arn
                RoomMessagePosterFunctionArn:
                  Fn::GetAtt:
                    - RoomMessagePosterFunction
                    - Arn
                CognitoUserPostConfirmationTriggerFunctionArn:
                  Fn::GetAtt:
                    - CognitoUserPostConfirmationTriggerFunction
                    - Arn
  
  #
  #   API Usage Plan Linker
  #   
  #   AWS CloudFormation Custom Resource for adding an API Gateway REST API and 
  #   stage to a usage plan.
  #
  #   Necessary to avoid a CloudFormation dependency loop.
  #
  
  ApiUsagePlanLinkerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Links an API Gateway usage plan to a REST API / stage.
      Handler: index.lambda_handler
      MemorySize: 1024
      Role:
        Fn::GetAtt:
          - ApiUsagePlanLinkerFunctionRole
          - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/ApiUsagePlanLinkerFunction.zip
      Runtime: python2.7
      Timeout: '300'
  
  ApiUsagePlanLinkerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
  
  ApiUsagePlanLinkerFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ApiUsagePlanLinkerFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ApiUsagePlanLinkerFunction}:log-stream:*
          - Effect: Allow
            Action:
              - apigateway:PATCH
            Resource:
              Fn::Sub: arn:aws:apigateway:us-east-1::/usageplans/${WebChatApiBasicUsagePlan}
      Roles:
        - Ref: ApiUsagePlanLinkerFunctionRole
  
  ApiUsagePlanLinkerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ApiUsagePlanLinkerFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  ApiUsagePlanLinkerInvocation:
    Type: Custom::ApiUsagePlanLinkerInvocation
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - ApiUsagePlanLinkerFunction
          - Arn
      RestApi:
        Ref: WebChatApi
      Stage:
        Ref: WebChatApiStage
      UsagePlan:
        Ref: WebChatApiBasicUsagePlan
    DependsOn:
      - ApiUsagePlanLinkerFunctionLogGroup
      - ApiUsagePlanLinkerFunctionRoleActions
  
  
  #
  #   Cognito User Roles
  #   
  
  CognitoAuthenticatedUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Fn::GetAtt:
                    - CognitoUserPoolResourceInvocation
                    - CognitoIdentityPoolId
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Path: "/"
  
  CognitoUnauthenticatedUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Fn::GetAtt:
                    - CognitoUserPoolResourceInvocation
                    - CognitoIdentityPoolId
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
      Path: "/"
  
  
  #
  #   Cognito User Pool Resource Function
  #   
  #   Used as a CloudFormation custom resource to create / update / delete 
  #   the Cognito User Pool.
  #
  
  CognitoUserPoolResourceFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Performs cleanup of associated resources on stack deletion.
      Handler: index.lambda_handler
      MemorySize: 1024
      Role:
        Fn::GetAtt:
          - CognitoUserPoolResourceFunctionRole
          - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/CognitoUserPoolResourceFunction.zip
      Runtime: python2.7
      Timeout: '300'
  
  CognitoUserPoolResourceFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
  
  CognitoUserPoolResourceFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CognitoUserPoolResourceFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CognitoUserPoolResourceFunction}:log-stream:*
          - Effect: Allow
            Action:
              - cognito-idp:CreateUserPool
            Resource: '*'
          - Effect: Allow
            Action:
              - cognito-idp:CreateUserPoolClient
              - cognito-idp:DeleteUserPool
            Resource:
              Fn::Sub: arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*
          - Effect: Allow
            Action:
              - cognito-identity:CreateIdentityPool
            Resource:
              Fn::Sub: arn:aws:cognito-identity:${AWS::Region}:${AWS::AccountId}:identitypool/
          - Effect: Allow
            Action:
              - cognito-identity:DeleteIdentityPool
            Resource:
              Fn::Sub: arn:aws:cognito-identity:${AWS::Region}:${AWS::AccountId}:identitypool/*
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Resource:
              - Fn::Sub: arn:aws:s3:::${SharedBucket}/cognito-user-pool.json
              - Fn::Sub: arn:aws:s3:::${SharedBucket}/cognito-identity-pool.json
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              Fn::Sub: arn:aws:s3:::${SharedBucket}
      Roles:
        - Ref: CognitoUserPoolResourceFunctionRole
  
  CognitoUserPoolResourceFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${CognitoUserPoolResourceFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  CognitoUserPoolResourceInvocation:
    Type: Custom::CognitoUserPoolResourceInvocation
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CognitoUserPoolResourceFunction
          - Arn
      PostConfirmationTriggerFunctionArn:
        Fn::GetAtt:
          - CognitoUserPostConfirmationTriggerFunction
          - Arn
      SharedBucket:
        Ref: SharedBucket
    DependsOn:
      - CognitoUserPoolResourceFunctionLogGroup
      - CognitoUserPoolResourceFunctionRoleActions
      - StackCleanupInvocation
  
  
  
  #
  #   Cognito User Post Confirmation Trigger
  #   
  #   Called when a new user is confirmed.
  #
  
  CognitoUserPostConfirmationTriggerFunction:
    Type: AWS::Lambda::Function
    Metadata:
      SharedBucket:
        Ref: SharedBucket
      StackName:
        Ref: AWS::StackName
      UsagePlanId:
        Ref: WebChatApiBasicUsagePlan
    Properties:
      Description: Performs cleanup of associated resources on stack deletion.
      Handler: index.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - CognitoUserPostConfirmationTriggerFunctionRole
          - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/CognitoUserPostConfirmationTriggerFunction.zip
      Runtime: python2.7
      Timeout: '300'
  
  CognitoUserPostConfirmationTriggerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
  
  CognitoUserPostConfirmationTriggerFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CognitoUserPostConfirmationTriggerFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CognitoUserPostConfirmationTriggerFunction}:log-stream:*
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource:
              Fn::Sub: arn:aws:s3:::${SharedBucket}/user-api-keys/*
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              Fn::Sub: arn:aws:s3:::${SharedBucket}
          - Effect: Allow
            Action:
              - iam:GetRolePolicy
            Resource:
              Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/${CognitoUserPostConfirmationTriggerFunctionRole}
          - Effect: Allow
            Action:
              - cloudformation:DescribeStackResource
            Resource:
              Ref: AWS::StackId
          - Effect: Allow
            Action:
              - apigateway:POST
            Resource:
              Fn::Sub: arn:aws:apigateway:${AWS::Region}::/apikeys
          - Effect: Allow
            Action:
              - apigateway:POST
            Resource:
              Fn::Sub: arn:aws:apigateway:${AWS::Region}::/usageplans/${WebChatApiBasicUsagePlan}/keys
      Roles:
        - Ref: CognitoUserPostConfirmationTriggerFunctionRole
  
  CognitoUserPostConfirmationTriggerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${CognitoUserPostConfirmationTriggerFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  CognitoUserPostConfirmationTriggerFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: CognitoUserPostConfirmationTriggerFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn:
        Fn::Sub:
          - arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}
          - CognitoUserPoolId:
              Fn::GetAtt:
                - CognitoUserPoolResourceInvocation
                - CognitoUserPoolId
    DependsOn:
      - RoomMessagePosterFunctionRoleActions
      - RoomMessagePosterFunctionLogGroup
  
  PreWarmCognitoUserPostConfirmationTriggerFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: PreWarmingEnabledCondition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: CognitoUserPostConfirmationTriggerFunction
      Principal:
        Fn::GetAtt:
          - PreWarmerFunctionRole
          - Arn
    DependsOn:
      - RoomMessagePosterFunctionRoleActions
      - RoomMessagePosterFunctionLogGroup
  
  
  
  #
  #   Cognito Identity Pool Role Linker
  #   
  #   Links pre-created IAM roles to a pre-created Cognito Identity Pool.
  #
  #   Necessary to create user roles via CloudFormation with a trust policy 
  #   appropriately limited to the Cognito Identity pool they'll be using, 
  #   which is based on the custom resource output of the function that 
  #   creates the identity pool itself.
  #
  
  CognitoIdentityPoolRoleLinkerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Links an API Gateway usage plan to a REST API / stage.
      Handler: index.lambda_handler
      MemorySize: 1024
      Role:
        Fn::GetAtt:
          - CognitoIdentityPoolRoleLinkerFunctionRole
          - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/CognitoIdentityPoolRoleLinkerFunction.zip
      Runtime: python2.7
      Timeout: '300'
  
  CognitoIdentityPoolRoleLinkerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
  
  CognitoIdentityPoolRoleLinkerFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CognitoIdentityPoolRoleLinkerFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CognitoIdentityPoolRoleLinkerFunction}:log-stream:*
          - Effect: Allow
            Action:
              - sts:PassRole
            Resource:
              - Fn::GetAtt:
                  - CognitoAuthenticatedUserRole
                  - Arn
              - Fn::GetAtt:
                  - CognitoUnauthenticatedUserRole
                  - Arn
          - Effect: Allow
            Action:
              - cognito-identity:SetIdentityPoolRoles
            Resource:
              Fn::Sub:
                - arn:aws:cognito-identity:${AWS::Region}:${AWS::AccountId}:identitypool/${CognitoIdentityPoolId}
                - CognitoIdentityPoolId:
                    Fn::GetAtt:
                      - CognitoUserPoolResourceInvocation
                      - CognitoIdentityPoolId
      Roles:
        - Ref: CognitoIdentityPoolRoleLinkerFunctionRole
  
  CognitoIdentityPoolRoleLinkerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${CognitoIdentityPoolRoleLinkerFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  CognitoIdentityPoolRoleLinkerInvocation:
    Type: Custom::CognitoIdentityPoolRoleLinkerInvocation
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CognitoIdentityPoolRoleLinkerFunction
          - Arn
      IdentityPoolId:
        Fn::GetAtt:
          - CognitoUserPoolResourceInvocation
          - CognitoIdentityPoolId
      UserRoles:
        AuthenticatedUserRole:
          Fn::GetAtt:
            - CognitoAuthenticatedUserRole
            - Arn
        UnauthenticatedUserRole:
          Fn::GetAtt:
            - CognitoUnauthenticatedUserRole
            - Arn
    DependsOn:
      - CognitoIdentityPoolRoleLinkerFunctionLogGroup
      - CognitoIdentityPoolRoleLinkerFunctionRoleActions
  
  
  
  
  #
  #   Stack Cleanup
  #   
  #   This function performs basic setup and cleanup functionality when the 
  #   stack is deleted.
  #   
  #   On delete:
  #     - Clears out shared S3 bucket
  #     - Deletes SNS topics
  #
  
  StackCleanupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Performs cleanup of associated resources on stack deletion.
      Handler: index.lambda_handler
      MemorySize: 1024
      Role:
        Fn::GetAtt:
          - StackCleanupFunctionRole
          - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/StackCleanupFunction.zip
      Runtime: python2.7
      Timeout: '300'
  
  StackCleanupFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
  
  StackCleanupFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: StackCleanupFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${StackCleanupFunction}:log-stream:*
          - Effect: Allow
            Action:
              - logs:DeleteLogGroup
            Resource: 
              Fn::Sub:
                - arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:sns/${AWS::Region}/${AWS::AccountId}/web-chat-${WebChatApi}-${WebChatApiStageName}-*
                - WebChatApiStageName:
                    Fn::FindInMap:
                      - StaticVariables
                      - Main
                      - StageName
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - Fn::Sub: arn:aws:s3:::${SharedBucket}/*
              - Fn::Sub: arn:aws:s3:::${StaticContentBucket}/*
          - Effect: Allow
            Action:
              - s3:DeleteObject
            Resource:
              - Fn::Sub: arn:aws:s3:::${SharedBucket}/*
              - Fn::Sub: arn:aws:s3:::${StaticContentBucket}/*
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              - Fn::Sub: arn:aws:s3:::${SharedBucket}
              - Fn::Sub: arn:aws:s3:::${StaticContentBucket}
          - Effect: Allow
            Action:
              - apigateway:DELETE
            Resource:
              Fn::Sub: arn:aws:apigateway:${AWS::Region}::/apikeys/*
      Roles:
        - Ref: StackCleanupFunctionRole
  
  StackCleanupFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${StackCleanupFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  StackCleanupInvocation:
    Type: Custom::StackCleanupInvocation
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - StackCleanupFunction
          - Arn
      Bucket:
        Ref: SharedBucket
      BucketContentType: Default
    DependsOn:
      - StackCleanupFunctionLogGroup
      - StackCleanupFunctionRoleActions
      
    
  #
  #   Static Content Bucket
  #   
  #   Hosts uploaded static web content (html, js, css).
  #

  StaticContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: "webchat-staticbucket-${WebChatApi}"
      WebsiteConfiguration:
        ErrorDocument: error.html
        IndexDocument: index.html

  StaticContentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: StaticContentBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Principal: '*'
            Resource:
              Fn::Sub: arn:aws:s3:::${StaticContentBucket}/*
          - Action: s3:ListBucket
            Effect: Allow
            Principal: '*'
            Resource:
              Fn::Sub: arn:aws:s3:::${StaticContentBucket}
  
  StaticWebSiteBucketCleanup:
    Type: Custom::StaticWebSiteBucketCleanupInvocation
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - StackCleanupFunction
          - Arn
      Bucket:
        Ref: StaticContentBucket
      BucketContentType: 'Static Content'
    DependsOn:
      - StackCleanupFunctionLogGroup
      - StackCleanupFunctionRoleActions
  
  
  #
  #   S3 Object Writer
  #   
  #   Generic Lambda function for easily creating / deleting arbitrary text 
  #   content as an S3 object.
  #
  
  S3ObjectWriterFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Performs cleanup of associated resources on stack deletion.
      Handler: index.lambda_handler
      MemorySize: 1024
      Role:
        Fn::GetAtt:
          - S3ObjectWriterFunctionRole
          - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/S3ObjectWriterFunction.zip
      Runtime: python2.7
      Timeout: '300'
  
  S3ObjectWriterFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
  
  S3ObjectWriterFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3ObjectWriterFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${S3ObjectWriterFunction}:log-stream:*
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource:
              Fn::Sub: arn:aws:s3:::${StaticContentBucket}/*
          - Effect: Allow
            Action:
              - s3:DeleteObject
            Resource:
              Fn::Sub: arn:aws:s3:::${StaticContentBucket}/*
      Roles:
        - Ref: S3ObjectWriterFunctionRole
  
  S3ObjectWriterFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${S3ObjectWriterFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  #
  #   WebChatApiPointerJsFile
  #
  #   Because our web interface is hosted in its own S3 bucket, it will need 
  #   some way of finding the URL of where the API lives.
  #   
  #   This creates a JavaScript file that simply defines a variable that 
  #   points to the endpoint. Now the web interface can simply include that 
  #   JavaScript file and reference the variable to know where to make 
  #   requests.
  #   
  #   It also deletes that file on deletion of itself.
  #
  
  
  WebChatApiPointerJsFileForStaticWebsiteBucket:
    Type: Custom::WebChatApiPointerJsFile
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - S3ObjectWriterFunction
          - Arn
      Bucket:
        Ref: StaticContentBucket
      Key: api/endpoint.js
      Content:
        Fn::Sub:
          - |-
            /*
                This represents the only pointer the web interface has to the 
                REST API's endpoint.
            */
            var WebChatApiEndpoint = "${RestApiEndpoint}";
            var CorsOriginList = "${CorsOriginList}";
          - RestApiEndpoint:
              Fn::Sub:
                - https://${WebChatApi}.execute-api.${AWS::Region}.amazonaws.com/${MainStageName}/
                - MainStageName:
                    Fn::FindInMap:
                    - StaticVariables
                    - Main
                    - StageName
            CorsOriginList:
              Fn::GetAtt:
                - CorsOriginCombinerInvocation
                - CorsOriginList
      Content-Type: text/javascript
    DependsOn:
      - S3ObjectWriterFunctionLogGroup
      - S3ObjectWriterFunctionRoleActions
        
          
Outputs:
  RestApiEndpoint:
    Value:
      Fn::Sub:
        - https://${WebChatApi}.execute-api.${AWS::Region}.amazonaws.com/${MainStageName}/
        - MainStageName:
            Fn::FindInMap:
            - StaticVariables
            - Main
            - StageName
  StaticContentBucket:
    Value:
      Ref: StaticContentBucket
  WebInterfaceHome:
    Value:
      Fn::GetAtt:
        - StaticContentBucket
        - WebsiteURL