---
AWSTemplateFormatVersion: '2010-09-09'
Description: A serverless web chat portal.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Deployment
        Parameters:
          - S3SourceType
          - S3SourceName
          - ApiDefinitionVersion
      - Label:
          default: Configuration
        Parameters:
          - EmailFromAddress
          - MetricAlarmEmailAddress
          - PreWarmingEnabled
          - LogRetentionDays
          - CustomApiBaseUrl
      - Label:
          default: Cross-Origin Resource Sharing
        Parameters:
          - IncludeBucketSiteInCorsOrigin
          - AdditionalCorsOrigins
    ParameterLabels:
      AdditionalCorsOrigins:
        default: Additional HTTP CORS Origins Allowed
      ApiDefinitionVersion:
        default: API Definition Version
      CustomApiBaseUrl:
        default: Custom API Base URL
      EmailFromAddress:
        default: E-mail From Address
      IncludeBucketSiteInCorsOrigin:
        default: Include Bucket Site in CORS Origin
      LogRetentionDays:
        default: Log Retention (days)
      MetricAlarmEmailAddress:
        default: Alarm E-mail Address
      PreWarmingEnabled:
        default: Pre-Warming Enabled
      S3SourceName:
        default: S3 Source Resource Name
      S3SourceType:
        default: S3 Source Resource Type
        
Parameters:
  AdditionalCorsOrigins:
    Type: CommaDelimitedList
    Description: Comma-separated list of additional domains allowed access to the API. Leave blank for default only.
    Default: ''
  ApiDefinitionVersion:
    Type: String
    Description: Change this value on stack update to reload API from definition file.
    Default: ''
  CustomApiBaseUrl:
    Type: String
    Description: Change this to point the web interface at a different API URL. Include the trailing slash. Leave blank for default.
    Default: ''
    AllowedPattern: ^[^"]*$
    ConstraintDescription: must not contain double quotes
  EmailFromAddress:
    Type: String
    Description: The e-mail address from which user e-mail address verification messages should be sent. Leave blank for default.
  IncludeBucketSiteInCorsOrigin:
    Type: String
    Description: Allows the default site to access the API.
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'
  LogRetentionDays:
    Type: String
    Default: '14'
    AllowedValues:
      - ''
      - '1'
      - '3'
      - '5'
      - '7'
      - '14'
      - '30'
      - '60'
      - '90'
      - '120'
      - '150'
      - '180'
      - '365'
      - '400'
      - '545'
      - '731'
      - '1827'
      - '3653'
  MetricAlarmEmailAddress:
    Type: String
    Description: In case of errors. Leave blank to disable.
  PreWarmingEnabled:
    Type: String
    Description: Ping resources each minute to keep initial response times fast.
    Default: 'No'
    AllowedValues:
      - 'Yes'
      - 'No'
  S3SourceName:
    Type: String
    #Default: moduspwnens-webchat-public-2016-12-06
    Default: webchat-lambda-src
  S3SourceType:
    Type: String
    #Default: S3 Bucket
    Default: CloudFormation Stack
    AllowedValues:
      - S3 Bucket
      - CloudFormation Stack
      
Mappings:
  StaticVariables:
    
    # Group Lambda memory allocation into classes for easy tweaking.
    LambdaMemoryClasses:
      
      # We'll use high values for very rarely called functions and low values 
      # for simple, often-called functions to strike a balance between 
      # performance and cost.
      StackCrudOperation: 1536
      ApiOccasional: 1536
      ApiCommon: 128
      PreWarmApi: 128
      
    Main:
      CognitoIdentityUserProfileDatasetName: user-profile
      DummyStageName: DummyStage
      PreWarmScheduleExpression: rate(1 minute)
      StageName: v1
      
Conditions:
  CustomApiBaseUrlSpecifiedCondition:
    Fn::Not:
      - Fn::Equals:
        - Ref: CustomApiBaseUrl
        - ''
  IncludeBucketSiteInCorsOriginCondition:
    Fn::Equals:
      - Ref: IncludeBucketSiteInCorsOrigin
      - 'Yes'
  IncludeMetricAlarmsCondition:
    Fn::Not:
      - Fn::Equals:
        - Ref: MetricAlarmEmailAddress
        - ''
  NoAdditionalCorsOriginsSpecifiedCondition:
    Fn::Equals:
      - Fn::Join:
         - ''
         - Ref: AdditionalCorsOrigins
      - ''
  PreWarmingEnabledCondition:
    Fn::Equals:
      - Ref: PreWarmingEnabled
      - 'Yes'
  SourceTypeIsS3BucketCondition:
    Fn::Equals:
      - Ref: S3SourceType
      - 'S3 Bucket'
      
Resources:
  
  #
  #   S3 Bucket
  #   
  #   Shared among various resources.
  #
  
  SharedBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
  
  SharedBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: SharedBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource:
              Fn::Sub: arn:aws:s3:::${SharedBucket}/api-cors.json
            Principal: '*'
  
  #  
  #   API Gateway - Global Account resources
  #  
  
  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
    DependsOn:
      - WebChatApiDummyStageLogGroup
      - WebChatApiMainStageLogGroup
  
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::Sub: ${ApiGatewayCloudWatchRole.Arn}
  
  #  
  #   API Gateway - REST API resources
  #  
  
  WebChatApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Ref: AWS::StackName
      Description: REST API for web chats.
      BodyS3Location:
        Bucket:
          Fn::Sub: ${SwaggerTemplatePresetInvocation.OutputBucket}
        Key:
          Fn::Sub: ${SwaggerTemplatePresetInvocation.OutputKey}
  
  WebChatApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: WebChatApi
      StageName:
        Fn::FindInMap:
          - StaticVariables
          - Main
          - DummyStageName
    DependsOn:
      - WebChatApiDummyStageLogGroup
  
  WebChatApiDummyStageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub:
          - API-Gateway-Execution-Logs_${WebChatApi}/${DummyStageName}
          - DummyStageName:
              Fn::FindInMap:
                - StaticVariables
                - Main
                - DummyStageName
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: WebChatApiDeployment
      MethodSettings:
        - ResourcePath: ''
          HttpMethod: "*/*"
          DataTraceEnabled: true
          LoggingLevel: INFO
          MetricsEnabled:
            Fn::If:
              - IncludeMetricAlarmsCondition
              - true
              - false
      RestApiId:
        Ref: WebChatApi
      StageName:
        Fn::FindInMap:
          - StaticVariables
          - Main
          - StageName
        
    DependsOn:
      - WebChatApiMainStageLogGroup
  
  WebChatApiMainStageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub:
          - API-Gateway-Execution-Logs_${WebChatApi}/${MainStageName}
          - MainStageName:
              Fn::FindInMap:
                - StaticVariables
                - Main
                - StageName
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiBasicUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName:
        Fn::Sub: webchat-${WebChatApi}-basic
      Description: Default usage plan for web chat API
      Throttle:
        BurstLimit: 100
        RateLimit: 10
  
  #
  #   SNS Delivery Status Resources
  #
  
  SNSFailureFeedbackRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sns.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: SNSFailureFeedbackRoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:PutMetricFilter
                Resource: '*'
  
  SNSSuccessFeedbackRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sns.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: SNSSuccessFeedbackRoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:PutMetricFilter
                Resource: '*'
  
  
  #  
  #   User Registration Request Handler Function
  #  
    
  UserRegistrationRequestHandlerFunction:
    Type: AWS::Lambda::Function
    Metadata:
      PreWarming: true
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-UserRegistrationRequestHandlerFunction
      Description: Generates a unique identifier for a user.
      Handler: index.proxy_lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - ApiOccasional
      Role:
        Fn::Sub: ${UserRegistrationRequestHandlerFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/UserRegistrationRequestHandlerFunction.zip
      Environment:
        Variables:
          API_DEFINITION_KEY:
            Fn::Sub: ${SwaggerTemplatePresetInvocation.OutputKey}
          COGNITO_USER_POOL_CLIENT_ID:
            Fn::Sub: ${CognitoUserPoolClient.Id}
          COGNITO_USER_POOL_CLIENT_SECRET:
            Fn::Sub: ${CognitoUserPoolClient.Secret}
          CORS_ORIGINS:
            Fn::Sub: ${CorsOriginListEscaped.Output}
          SHARED_BUCKET:
            Ref: SharedBucket
      Runtime: python2.7
      Timeout: 300
  
  UserRegistrationRequestHandlerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${UserRegistrationRequestHandlerFunctionLogGroup.Arn}
  
  UserRegistrationRequestHandlerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-UserRegistrationRequestHandlerFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  
  
  
  #  
  #   User E-mail Address Verification Handler Function
  #  
    
  UserEmailAddressVerificationHandlerFunction:
    Type: AWS::Lambda::Function
    Metadata:
      PreWarming: true
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-UserEmailAddressVerificationHandlerFunction
      Description: Generates a unique identifier for a user.
      Handler: index.proxy_lambda_handler
      MemorySize: 
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - ApiOccasional
      Role:
        Fn::Sub: ${UserEmailAddressVerificationHandlerFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/UserEmailAddressVerificationHandlerFunction.zip
      Environment:
        Variables:
          API_DEFINITION_KEY:
            Fn::Sub: ${SwaggerTemplatePresetInvocation.OutputKey}
          COGNITO_USER_POOL_ID:
            Fn::Sub: ${CognitoUserPool.Id}
          COGNITO_USER_POOL_CLIENT_ID:
            Fn::Sub: ${CognitoUserPoolClient.Id}
          COGNITO_USER_POOL_CLIENT_SECRET:
            Fn::Sub: ${CognitoUserPoolClient.Secret}
          COGNITO_USER_PROFILE_DATASET_NAME:
            Fn::FindInMap:
              - StaticVariables
              - Main
              - CognitoIdentityUserProfileDatasetName
          CORS_ORIGINS:
            Fn::Sub: ${CorsOriginListEscaped.Output}
          SHARED_BUCKET:
            Ref: SharedBucket
      Runtime: python2.7
      Timeout: 300
  
  UserEmailAddressVerificationHandlerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${UserEmailAddressVerificationHandlerFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - cognito-idp:AdminGetUser
                  - cognito-idp:ListUsers
                Resource:
                  Fn::Sub: ${CognitoUserPool.Arn}
              - Effect: Allow
                Action:
                  - cognito-sync:ListRecords
                Resource:
                  Fn::Sub:
                    - ${CognitoIdentityPool.SyncArn}/identity/*/dataset/${CognitoIdentityUserProfileDatasetName}
                    - CognitoIdentityUserProfileDatasetName:
                        Fn::FindInMap:
                          - StaticVariables
                          - Main
                          - CognitoIdentityUserProfileDatasetName
  
  UserEmailAddressVerificationHandlerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-UserEmailAddressVerificationHandlerFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  
  #  
  #   User Login Handler Function
  #  
    
  UserLoginHandlerFunction:
    Type: AWS::Lambda::Function
    Metadata:
      PreWarming: true
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-UserLoginHandlerFunction
      Description: Processes a login request from a user and returns credentials if successful.
      Handler: index.proxy_lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - ApiOccasional
      Role:
        Fn::Sub: ${UserLoginHandlerFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/UserLoginHandlerFunction.zip
      Environment:
        Variables:
          API_DEFINITION_KEY:
            Fn::Sub: ${SwaggerTemplatePresetInvocation.OutputKey}
          API_KEY_CREATOR_FUNCTION_ARN:
            Fn::Sub: ${ApiKeyCreatorFunction.Arn}
          COGNITO_IDENTITY_POOL_ID:
            Fn::Sub: ${CognitoIdentityPool.Id}
          COGNITO_USER_POOL_ID:
            Fn::Sub: ${CognitoUserPool.Id}
          COGNITO_USER_POOL_CLIENT_ID:
            Fn::Sub: ${CognitoUserPoolClient.Id}
          COGNITO_USER_POOL_CLIENT_SECRET:
            Fn::Sub: ${CognitoUserPoolClient.Secret}
          COGNITO_USER_PROFILE_DATASET_NAME:
            Fn::FindInMap:
              - StaticVariables
              - Main
              - CognitoIdentityUserProfileDatasetName
          CORS_ORIGINS:
            Fn::Sub: ${CorsOriginListEscaped.Output}
          SHARED_BUCKET:
            Ref: SharedBucket
      Runtime: python2.7
      Timeout: 300
  
  UserLoginHandlerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${UserLoginHandlerFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - cognito-idp:AdminInitiateAuth
                Resource:
                  Fn::Sub: ${CognitoUserPool.Arn}
              - Effect: Allow
                Action:
                  - cognito-sync:ListRecords
                Resource:
                  Fn::Sub: ${CognitoIdentityPool.SyncArn}/identity/*
              - Effect: Allow
                Action:
                  - cognito-sync:UpdateRecords
                Resource:
                  Fn::Sub: 
                    - ${CognitoIdentityPool.SyncArn}/identity/*/dataset/${CognitoIdentityUserProfileDatasetName}
                    - CognitoIdentityUserProfileDatasetName:
                        Fn::FindInMap:
                          - StaticVariables
                          - Main
                          - CognitoIdentityUserProfileDatasetName
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  Fn::Sub: ${ApiKeyCreatorFunction.Arn}
  
  UserLoginHandlerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-UserLoginHandlerFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  
  
  
  #  
  #   User Forgot Password Request Handler Function
  #  
    
  UserForgotPasswordHandlerFunction:
    Type: AWS::Lambda::Function
    Metadata:
      PreWarming: true
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-UserForgotPasswordHandlerFunction
      Description: Handles user forgot password requests.
      Handler: index.proxy_lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - ApiOccasional
      Role:
        Fn::Sub: ${UserForgotPasswordHandlerFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/UserForgotPasswordHandlerFunction.zip
      Environment:
        Variables:
          API_DEFINITION_KEY:
            Fn::Sub: ${SwaggerTemplatePresetInvocation.OutputKey}
          COGNITO_USER_POOL_CLIENT_ID:
            Fn::Sub: ${CognitoUserPoolClient.Id}
          COGNITO_USER_POOL_CLIENT_SECRET:
            Fn::Sub: ${CognitoUserPoolClient.Secret}
          CORS_ORIGINS:
            Fn::Sub: ${CorsOriginListEscaped.Output}
          SHARED_BUCKET:
            Ref: SharedBucket
      Runtime: python2.7
      Timeout: 300
  
  UserForgotPasswordHandlerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${UserForgotPasswordHandlerFunctionLogGroup.Arn}
  
  UserForgotPasswordHandlerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-UserForgotPasswordHandlerFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  
  
  #  
  #   User Reset Password Request Handler Function
  #  
    
  UserChangePasswordHandlerFunction:
    Type: AWS::Lambda::Function
    Metadata:
      PreWarming: true
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-UserChangePasswordHandlerFunction
      Description: Handles user forgot password requests.
      Handler: index.proxy_lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - ApiOccasional
      Role:
        Fn::Sub: ${UserChangePasswordHandlerFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/UserChangePasswordHandlerFunction.zip
      Environment:
        Variables:
          API_DEFINITION_KEY:
            Fn::Sub: ${SwaggerTemplatePresetInvocation.OutputKey}
          COGNITO_USER_POOL_ID:
            Fn::Sub: ${CognitoUserPool.Id}
          COGNITO_USER_POOL_CLIENT_ID:
            Fn::Sub: ${CognitoUserPoolClient.Id}
          COGNITO_USER_POOL_CLIENT_SECRET:
            Fn::Sub: ${CognitoUserPoolClient.Secret}
          COGNITO_USER_PROFILE_DATASET_NAME:
            Fn::FindInMap:
              - StaticVariables
              - Main
              - CognitoIdentityUserProfileDatasetName
          CORS_ORIGINS:
            Fn::Sub: ${CorsOriginListEscaped.Output}
          SHARED_BUCKET:
            Ref: SharedBucket
      Runtime: python2.7
      Timeout: 300
  
  UserChangePasswordHandlerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${UserChangePasswordHandlerFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - cognito-sync:ListRecords
                Resource:
                  Fn::Sub:
                    - ${CognitoIdentityPool.SyncArn}/identity/*/dataset/${CognitoIdentityUserProfileDatasetName}
                    - CognitoIdentityUserProfileDatasetName:
                        Fn::FindInMap:
                          - StaticVariables
                          - Main
                          - CognitoIdentityUserProfileDatasetName
  
  UserChangePasswordHandlerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-UserChangePasswordHandlerFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  
  
  
  #  
  #   User API Key Reset Handler
  #  
    
  UserApiKeyResetHandlerFunction:
    Type: AWS::Lambda::Function
    Metadata:
      PreWarming: true
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-UserApiKeyResetHandlerFunction
      Description: Resets a user's API key.
      Handler: index.proxy_lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - ApiOccasional
      Role:
        Fn::Sub: ${UserApiKeyResetHandlerFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/UserApiKeyResetHandlerFunction.zip
      Environment:
        Variables:
          API_DEFINITION_KEY:
            Fn::Sub: ${SwaggerTemplatePresetInvocation.OutputKey}
          API_KEY_CREATOR_FUNCTION_ARN:
            Fn::Sub: ${ApiKeyCreatorFunction.Arn}
          CORS_ORIGINS:
            Fn::Sub: ${CorsOriginListEscaped.Output}
          SHARED_BUCKET:
            Ref: SharedBucket
      Runtime: python2.7
      Timeout: 300
  
  UserApiKeyResetHandlerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${UserApiKeyResetHandlerFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  Fn::Sub: ${ApiKeyCreatorFunction.Arn}
  
  UserApiKeyResetHandlerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-UserApiKeyResetHandlerFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  
  
  #  
  #   User Update Handler
  #  
    
  UserUpdateHandlerFunction:
    Type: AWS::Lambda::Function
    Metadata:
      PreWarming: true
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-UserUpdateHandlerFunction
      Description: Handles requests to update a user's attribute(s).
      Handler: index.proxy_lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - ApiOccasional
      Role:
        Fn::Sub: ${UserUpdateHandlerFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/UserUpdateHandlerFunction.zip
      Environment:
        Variables:
          API_DEFINITION_KEY:
            Fn::Sub: ${SwaggerTemplatePresetInvocation.OutputKey}
          CORS_ORIGINS:
            Fn::Sub: ${CorsOriginListEscaped.Output}
          SHARED_BUCKET:
            Ref: SharedBucket
      Runtime: python2.7
      Timeout: 300
  
  UserUpdateHandlerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${UserUpdateHandlerFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:ListUsers
                Resource:
                  Fn::Sub: ${CognitoUserPool.Arn}
  
  UserUpdateHandlerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-UserUpdateHandlerFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  
  
  
  #  
  #   Room Generator Function
  #  
    
  RoomGeneratorFunction:
    Type: AWS::Lambda::Function
    Metadata:
      PreWarming: true
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-RoomGeneratorFunction
      Description: Generates a unique identifier for a chat room.
      Handler: index.proxy_lambda_handler
      MemorySize: 
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - ApiOccasional
      Role:
        Fn::Sub: ${RoomGeneratorFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/RoomGeneratorFunction.zip
      Environment:
        Variables:
          API_DEFINITION_KEY:
            Fn::Sub: ${SwaggerTemplatePresetInvocation.OutputKey}
          CORS_ORIGINS:
            Fn::Sub: ${CorsOriginListEscaped.Output}
          DELETE_ROOM_TOPIC_ROLE:
            Fn::Sub: ${StackCleanupFunctionRole.Arn}
          PROJECT_GLOBAL_PREFIX:
            Fn::Sub: ${ProjectGlobalPrefix.Prefix}
          PUBLISH_ROOM_TOPIC_ROLE:
            Fn::Sub: ${RoomMessagePosterFunctionRole.Arn}
          ROOM_LIFECYCLE_FUNCTION_ROLE:
            Fn::Sub: ${RoomLifecycleHandlerFunctionRole.Arn}
          ROOM_LIFECYCLE_STATE_MACHINE_ARN:
            Fn::Sub: ${RoomLifecycleStateMachine.StateMachineArn}
          ROOM_LOG_EVENT_PROCESSOR_FUNCTION_ARN:
            Fn::Sub: ${RoomLogEventProcessorFunction.Arn}
          OWN_FUNCTION_ROLE:
            Fn::Sub: ${RoomGeneratorFunctionRole.Arn}
          SHARED_BUCKET:
            Ref: SharedBucket
          SUBSCRIBE_ROOM_TOPIC_ROLE:
            Fn::Sub: ${RoomSessionGeneratorFunctionRole.Arn}
          SNS_FAILURE_FEEDBACK_ROLE:
            Fn::Sub: ${SNSFailureFeedbackRole.Arn}
          SNS_SUCCESS_FEEDBACK_ROLE:
            Fn::Sub: ${SNSSuccessFeedbackRole.Arn}
            
      Runtime: python2.7
      Timeout: 300
  
  RoomGeneratorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${RoomGeneratorFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - sns:CreateTopic
                  - sns:SetTopicAttributes
                Resource: 
                  Fn::Sub: arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${ProjectGlobalPrefix.Prefix}-*
              - Effect: Allow
                Action: 
                  - logs:CreateLogGroup
                  - logs:PutMetricFilter
                  - logs:PutSubscriptionFilter
                Resource: 
                  - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:sns/${AWS::Region}/${AWS::AccountId}/${ProjectGlobalPrefix.Prefix}-*
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  Fn::Sub: ${RoomLifecycleStateMachine.StateMachineArn}
  
  RoomGeneratorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-RoomGeneratorFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  
  #  
  #   Room Session Generator Function
  #  
    
  RoomSessionGeneratorFunction:
    Type: AWS::Lambda::Function
    Metadata:
      PreWarming: true
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-RoomSessionGeneratorFunction
      Description: Generates a unique identifier for a user.
      Handler: index.proxy_lambda_handler
      MemorySize: 
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - ApiOccasional
      Role:
        Fn::Sub: ${RoomSessionGeneratorFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/RoomSessionGeneratorFunction.zip
      Environment:
        Variables:
          ACKNOWLEDGER_FUNCTION_ROLE:
            Fn::Sub: ${RoomMessageAcknowledgerFunctionRole.Arn}
          API_DEFINITION_KEY:
            Fn::Sub: ${SwaggerTemplatePresetInvocation.OutputKey}
          CORS_ORIGINS:
            Fn::Sub: ${CorsOriginListEscaped.Output}
          POLLER_FUNCTION_ROLE:
            Fn::Sub: ${RoomMessagePollerFunctionRole.Arn}
          OWN_FUNCTION_ROLE:
            Fn::Sub: ${RoomSessionGeneratorFunctionRole.Arn}
          PROJECT_GLOBAL_PREFIX:
            Fn::Sub: ${ProjectGlobalPrefix.Prefix}
          QUEUE_DELETE_FUNCTION_ROLE:
            Fn::Sub: ${StackCleanupFunctionRole.Arn}
          ROOM_LIFECYCLE_FUNCTION_ROLE:
            Fn::Sub: ${RoomLifecycleHandlerFunctionRole.Arn}
          SHARED_BUCKET:
            Ref: SharedBucket
          STACK_NAME:
            Ref: AWS::StackName
      Runtime: python2.7
      Timeout: 300
  
  RoomSessionGeneratorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${RoomSessionGeneratorFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - sqs:CreateQueue
                  - sqs:GetQueueAttributes
                Resource:
                  Fn::Sub: arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${ProjectGlobalPrefix.Prefix}-*
  
  RoomSessionGeneratorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-RoomSessionGeneratorFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  
  
  #  
  #   Room Message Poller Function
  #  
    
  RoomMessagePollerFunction:
    Type: AWS::Lambda::Function
    Metadata:
      PreWarming: true
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-RoomMessagePollerFunction
      Description: Returns any new messages sent to the requested room.
      Handler: index.proxy_lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - ApiCommon
      Role:
        Fn::Sub: ${RoomMessagePollerFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/RoomMessagePollerFunction.zip
      Environment:
        Variables:
          API_DEFINITION_KEY:
            Fn::Sub: ${SwaggerTemplatePresetInvocation.OutputKey}
          CORS_ORIGINS:
            Fn::Sub: ${CorsOriginListEscaped.Output}
          PROJECT_GLOBAL_PREFIX:
            Fn::Sub: ${ProjectGlobalPrefix.Prefix}
          SHARED_BUCKET:
            Ref: SharedBucket
      Runtime: python2.7
      Timeout: 300
  
  RoomMessagePollerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoomMessagePollerFunctionRoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${RoomMessagePollerFunctionLogGroup.Arn}
  
  RoomMessagePollerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-RoomMessagePollerFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  
  
  
  
  #  
  #   Room Message Acknowledger Function
  #  
    
  RoomMessageAcknowledgerFunction:
    Type: AWS::Lambda::Function
    Metadata:
      PreWarming: true
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-RoomMessageAcknowledgerFunction
      Description: Returns any new messages sent to the requested room.
      Handler: index.proxy_lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - ApiCommon
      Role:
        Fn::Sub: ${RoomMessageAcknowledgerFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/RoomMessageAcknowledgerFunction.zip
      Environment:
        Variables:
          API_DEFINITION_KEY:
            Fn::Sub: ${SwaggerTemplatePresetInvocation.OutputKey}
          CORS_ORIGINS:
            Fn::Sub: ${CorsOriginListEscaped.Output}
          PROJECT_GLOBAL_PREFIX:
            Fn::Sub: ${ProjectGlobalPrefix.Prefix}
          SHARED_BUCKET:
            Ref: SharedBucket
      Runtime: python2.7
      Timeout: 300
  
  RoomMessageAcknowledgerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${RoomMessageAcknowledgerFunctionLogGroup.Arn}
  
  RoomMessageAcknowledgerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-RoomMessageAcknowledgerFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  
  
  #  
  #   Room Message Poster Function
  #  
    
  RoomMessagePosterFunction:
    Type: AWS::Lambda::Function
    Metadata:
      PreWarming: true
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-RoomMessagePosterFunction
      Description: Returns any new messages sent to the requested room.
      Handler: index.proxy_lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - ApiOccasional
      Role:
        Fn::Sub: ${RoomMessagePosterFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/RoomMessagePosterFunction.zip
      Environment:
        Variables:
          API_DEFINITION_KEY:
            Fn::Sub: ${SwaggerTemplatePresetInvocation.OutputKey}
          COGNITO_USER_PROFILE_DATASET_NAME:
            Fn::FindInMap:
              - StaticVariables
              - Main
              - CognitoIdentityUserProfileDatasetName
          CORS_ORIGINS:
            Fn::Sub: ${CorsOriginListEscaped.Output}
          PROJECT_GLOBAL_PREFIX:
            Fn::Sub: ${ProjectGlobalPrefix.Prefix}
          SHARED_BUCKET:
            Ref: SharedBucket
      Runtime: python2.7
      Timeout: 300
  
  RoomMessagePosterFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - Fn::Sub: ${RoomMessagePosterFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - cognito-sync:ListRecords
                Resource:
                  Fn::Sub: arn:aws:cognito-sync:${AWS::Region}:${AWS::AccountId}:identitypool/${CognitoIdentityPool.Id}/identity/*
              - Effect: Allow
                Action:
                  - cognito-idp:ListUsers
                Resource:
                  Fn::Sub: ${CognitoUserPool.Arn}
  
  RoomMessagePosterFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-RoomMessagePosterFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  
  
  #  
  #   Room Message Log Fetcher Function
  #  
    
  RoomMessageLogFetcherFunction:
    Type: AWS::Lambda::Function
    Metadata:
      PreWarming: true
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-RoomMessageLogFetcherFunction
      Description: Returns any new messages sent to the requested room.
      Handler: index.proxy_lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - ApiOccasional
      Role:
        Fn::Sub: ${RoomMessageLogFetcherFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/RoomMessageLogFetcherFunction.zip
      Environment:
        Variables:
          API_DEFINITION_KEY:
            Fn::Sub: ${SwaggerTemplatePresetInvocation.OutputKey}
          CORS_ORIGINS:
            Fn::Sub: ${CorsOriginListEscaped.Output}
          PROJECT_GLOBAL_PREFIX:
            Fn::Sub: ${ProjectGlobalPrefix.Prefix}
          SHARED_BUCKET:
            Ref: SharedBucket
      Runtime: python2.7
      Timeout: 300
  
  RoomMessageLogFetcherFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - Fn::Sub: ${RoomMessageLogFetcherFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  Fn::Sub: arn:aws:s3:::${SharedBucket}/room-event-logs/*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  Fn::Sub: arn:aws:s3:::${SharedBucket}
                Condition:
                  StringLike:
                    s3:prefix:
                      - room-event-logs/*
  
  RoomMessageLogFetcherFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-RoomMessageLogFetcherFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  
  
  #
  #   Room Log Event Processor
  #
  
  RoomLogEventProcessorFunction:
    Type: AWS::Lambda::Function
    Metadata:
      PreWarming: true
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-RoomLogEventProcessorFunction
      Description: Processes CloudWatch room event logs
      Handler: index.lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - ApiOccasional
      Role:
        Fn::Sub: ${RoomLogEventProcessorFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/RoomLogEventProcessorFunction.zip
      Environment:
        Variables:
          SHARED_BUCKET:
            Ref: SharedBucket
      Runtime: python2.7
      Timeout: 300
  
  RoomLogEventProcessorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${RoomLogEventProcessorFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  Fn::Sub: arn:aws:s3:::${SharedBucket}/room-event-logs/*
  
  RoomLogEventProcessorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-RoomLogEventProcessorFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  RoomLogEventProcessorSnsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: RoomLogEventProcessorFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${ProjectGlobalPrefix.Prefix}-*
      
  
  
  #
  #   Room Lifecycle Handler
  #   
  #   State machine and Lambda function for managing the chat room's state 
  #   over its lifetime.
  #
  
  RoomLifecycleHandlerFunction:
    Type: AWS::Lambda::Function
    Metadata:
      PreWarming: true
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-RoomLifecycleHandlerFunction
      Description: Handles room lifecycle events as part of a state machine.
      Handler: index.lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - ApiOccasional
      Role:
        Fn::Sub: ${RoomLifecycleHandlerFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/RoomLifecycleHandlerFunction.zip
      Environment:
        Variables:
          DELETE_ROOM_TOPIC_ROLE:
            Fn::Sub: ${StackCleanupFunctionRole.Arn}
          OWN_FUNCTION_ROLE:
            Fn::Sub: ${RoomLifecycleHandlerFunctionRole.Arn}
          PROJECT_GLOBAL_PREFIX:
            Fn::Sub: ${ProjectGlobalPrefix.Prefix}
      Runtime: python2.7
      Timeout: 300
  
  RoomLifecycleHandlerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${RoomLifecycleHandlerFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - logs:DeleteLogGroup
                Resource: 
                  - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:sns/${AWS::Region}/${AWS::AccountId}/${ProjectGlobalPrefix.Prefix}-*
              - Effect: Allow
                Action:
                  - sqs:ListQueues
                Resource:
                  Fn::Sub: arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*
  
  RoomLifecycleHandlerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-RoomLifecycleHandlerFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  RoomLifecycleStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - Fn::Sub: states.${AWS::Region}.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  Fn::Sub: ${RoomLifecycleHandlerFunction.Arn}
  
  RoomLifecycleStateMachine:
    Type: Custom::StepFunctionStateMachine
    Properties:
      ServiceToken:
        Fn::Sub: ${StepFunctionStateMachineCustomResourceFunction.Arn}
      OnDelete:
        - StopExecutions
      Definition:
        Fn::Sub: |-
          {
            "Comment": "A state machine for managing the lifecycle of a chat room.",
            "StartAt": "Wait Until Room Duration Expires",
            "States": {
              "Wait Until Room Duration Expires": {
                "Type": "Wait",
                "SecondsPath": "$.config.duration",
                "Next": "Close Room To New Posts"
              },
              "Close Room To New Posts": {
                "Type": "Task",
                "Resource": "${RoomLifecycleHandlerFunction.Arn}",
                "Retry": [
                  {
                    "ErrorEquals": [ "States.ALL" ],
                    "IntervalSeconds": 5,
                    "MaxAttempts": 10
                  }
                ],
                "Next": "Wait for In-Flight Events to Process"
              },
              "Wait for In-Flight Events to Process": {
                "Comment": "A delay to ensure room events flow all the way to permanent storage before cleaning up dependent resources.",
                "Type": "Wait",
                "SecondsPath": "$.inflight-wait-duration",
                "Next": "Continue Room Cleanup"
              },
              "Continue Room Cleanup": {
                "Type": "Task",
                "Resource": "${RoomLifecycleHandlerFunction.Arn}",
                "Retry": [
                  {
                    "ErrorEquals": [ "States.ALL" ],
                    "IntervalSeconds": 5,
                    "MaxAttempts": 10
                  }
                ],
                "End": true
              }
            }
          }
      RoleArn:
        Fn::Sub: ${RoomLifecycleStateMachineRole.Arn}
  
  
  
  #
  #   API Key Creator
  #   
  #   Used with a state machine to create a new API key for a user.
  #
  
  ApiKeyCreatorFunction:
    Type: AWS::Lambda::Function
    Metadata:
      PreWarming: true
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-ApiKeyCreatorFunction
      Description: Creates a new API key and assigns it to a user.
      Handler: index.lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - ApiOccasional
      Role:
        Fn::Sub: ${ApiKeyCreatorFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/ApiKeyCreatorFunction.zip
      Environment:
        Variables:
          COGNITO_IDENTITY_POOL_ID:
            Fn::Sub: ${CognitoIdentityPool.Id}
          COGNITO_USER_PROFILE_DATASET_NAME:
            Fn::FindInMap:
              - StaticVariables
              - Main
              - CognitoIdentityUserProfileDatasetName
          STACK_NAME:
            Ref: AWS::StackName
          USAGE_PLAN_ID:
            Ref: WebChatApiBasicUsagePlan
      Runtime: python2.7
      Timeout: 300
  
  ApiKeyCreatorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${ApiKeyCreatorFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - apigateway:POST
                Resource:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}::/apikeys
              - Effect: Allow
                Action:
                  - apigateway:DELETE
                Resource:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}::/apikeys/*
              - Effect: Allow
                Action:
                  - apigateway:POST
                Resource:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}::/usageplans/${WebChatApiBasicUsagePlan}/keys
              - Effect: Allow
                Action:
                  - cognito-sync:ListRecords
                Resource:
                  Fn::Sub: arn:aws:cognito-sync:${AWS::Region}:${AWS::AccountId}:identitypool/${CognitoIdentityPool.Id}/identity/*
              - Effect: Allow
                Action:
                  - cognito-sync:UpdateRecords
                Resource:
                  Fn::Sub: 
                    - arn:aws:cognito-sync:${AWS::Region}:${AWS::AccountId}:identitypool/${CognitoIdentityPool.Id}/identity/*/dataset/${CognitoIdentityUserProfileDatasetName}
                    - CognitoIdentityUserProfileDatasetName:
                        Fn::FindInMap:
                          - StaticVariables
                          - Main
                          - CognitoIdentityUserProfileDatasetName
  
  ApiKeyCreatorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-ApiKeyCreatorFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  
  
  #
  #   CloudWatch Alarms
  #
  
  AdminAlarmTopic:
    Type: AWS::SNS::Topic
    Condition: IncludeMetricAlarmsCondition
    Properties:
      Subscription:
        - Endpoint:
            Ref: MetricAlarmEmailAddress
          Protocol: email
  
  LambdaThrottlesAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IncludeMetricAlarmsCondition
    Properties:
      Namespace: AWS/Lambda
      MetricName: Throttles
      EvaluationPeriods: 1
      Period: 60
      Statistic: Sum
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - Ref: AdminAlarmTopic
  
  RoomGeneratorErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IncludeMetricAlarmsCondition
    Properties:
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: RoomGeneratorFunction
      MetricName: Errors
      EvaluationPeriods: 1
      Period: 60
      Statistic: Sum
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - Ref: AdminAlarmTopic
  
  Api5XXErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IncludeMetricAlarmsCondition
    Properties:
      Namespace: AWS/ApiGateway
      Dimensions:
        - Name: ApiName
          Value:
            Ref: AWS::StackName
        - Name: Stage
          Value:
            Ref: WebChatApiStage
      MetricName: 5XXError
      EvaluationPeriods: 1
      Period: 60
      Statistic: Average
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - Ref: AdminAlarmTopic
  
  
  #
  #   Pre-Warming
  #   
  #   This function allows for prewarming an arbitrary number of other 
  #   Lambda functions through a single CloudWatch event rule and target.
  #
  
  PreWarmerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-PreWarmerFunction
      Description: Queues up Lambda function invocations for later execution.
      Handler: index.lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - PreWarmApi
      Role:
        Fn::Sub: ${PreWarmerFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/PreWarmerFunction.zip
      Runtime: python2.7
      Timeout: 300
  
  PreWarmerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${PreWarmerFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - Fn::Sub: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectGlobalPrefix.Prefix}-*
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStackResource
                  - cloudformation:ListStackResources
                Resource:
                  Ref: AWS::StackId
  
  PreWarmerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-PreWarmerFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  PreWarmApiCloudWatchPreWarmerFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: PreWarmingEnabledCondition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: PreWarmerFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::Sub: ${PreWarmApiEventRule.Arn}
  
  PreWarmApiEventRule:
    Type: AWS::Events::Rule
    Condition: PreWarmingEnabledCondition
    Properties:
      Description: Keeps web chat API Lambda functions warm by invoking them frequently.
      ScheduleExpression:
        Fn::FindInMap:
          - StaticVariables
          - Main
          - PreWarmScheduleExpression
      State: ENABLED
      Targets:
        - Arn:
            Fn::Sub: ${PreWarmerFunction.Arn}
          Id: PreWarmerFunction
          Input:
            Fn::Sub: |-
              {
                  "payload": {
                      "warming": true
                  },
                  "stack-id": "${AWS::StackId}"
              }
  
  #
  #   API Usage Plan Linker
  #   
  #   AWS CloudFormation Custom Resource for adding an API Gateway REST API and 
  #   stage to a usage plan.
  #
  
  ApiUsagePlanLinkerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-ApiUsagePlanLinkerFunction
      Description: Links an API Gateway usage plan to a REST API / stage.
      Handler: index.lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - StackCrudOperation
      Role:
        Fn::Sub: ${ApiUsagePlanLinkerFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/ApiUsagePlanLinkerFunction.zip
      Runtime: python2.7
      Timeout: 300
  
  ApiUsagePlanLinkerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${ApiUsagePlanLinkerFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - apigateway:PATCH
                Resource:
                  Fn::Sub: arn:aws:apigateway:us-east-1::/usageplans/${WebChatApiBasicUsagePlan}
  
  ApiUsagePlanLinkerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-ApiUsagePlanLinkerFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  ApiUsagePlanLinkerInvocation:
    Type: Custom::ApiUsagePlanLinkerInvocation
    Properties:
      ServiceToken:
        Fn::Sub: ${ApiUsagePlanLinkerFunction.Arn}
      RestApi:
        Ref: WebChatApi
      Stage:
        Ref: WebChatApiStage
      UsagePlan:
        Ref: WebChatApiBasicUsagePlan
  
  
  
  #
  #   Cognito User Roles
  #   
  
  CognitoAuthenticatedUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Fn::Sub: ${CognitoIdentityPool.Id}
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:invoke
                Resource:
                  - Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/${WebChatApiStage}/PATCH/user
                  - Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/${WebChatApiStage}/GET/user/email/verify
                  - Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/${WebChatApiStage}/POST/user/password
                  - Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/${WebChatApiStage}/PUT/user/api-key
                  - Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/${WebChatApiStage}/POST/room
                  - Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/${WebChatApiStage}/POST/room/*/session
                  - Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/${WebChatApiStage}/GET/room/*/message
                  - Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/${WebChatApiStage}/POST/room/*/message
                  - Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/${WebChatApiStage}/GET/room/*/session/*/message
                  - Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/${WebChatApiStage}/PUT/room/*/session/*/message
  
  CognitoUnauthenticatedUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Fn::Sub: ${CognitoIdentityPool.Id}
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
      Path: "/"
  
  
  
  #
  #   Cognito User Pool
  #
  
  CognitoUserPoolCustomResourceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-CognitoUserPoolCustomResourceFunction
      Description: Used as a CloudFormation custom resource to manage a Cognito User Pool.
      Handler: index.lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - StackCrudOperation
      Role:
        Fn::Sub: ${CognitoUserPoolCustomResourceFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/CognitoUserPoolCustomResourceFunction.zip
      Environment:
        Variables:
          PROJECT_GLOBAL_PREFIX:
            Fn::Sub: ${ProjectGlobalPrefix.Prefix}
      Runtime: python2.7
      Timeout: 300
  
  CognitoUserPoolCustomResourceFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${CognitoUserPoolCustomResourceFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - cognito-idp:CreateUserPool
                Resource: '*'
              - Effect: Allow
                Action:
                  - cognito-idp:DeleteUserPool
                Resource:
                  Fn::Sub: arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*
  
  CognitoUserPoolCustomResourceFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-CognitoUserPoolCustomResourceFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  CognitoUserPool:
    Type: Custom::CognitoUserPool
    Properties:
      ServiceToken:
        Fn::Sub: ${CognitoUserPoolCustomResourceFunction.Arn}
  
  
  
  
  #
  #   Cognito User Pool Client
  #
  
  CognitoUserPoolClientCustomResourceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-CognitoUserPoolClientCustomResourceFunction
      Description: Used as a CloudFormation custom resource to manage a Cognito User Pool client.
      Handler: index.lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - StackCrudOperation
      Role:
        Fn::Sub: ${CognitoUserPoolClientCustomResourceFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/CognitoUserPoolClientCustomResourceFunction.zip
      Environment:
        Variables:
          PROJECT_GLOBAL_PREFIX:
            Fn::Sub: ${ProjectGlobalPrefix.Prefix}
      Runtime: python2.7
      Timeout: 300
  
  CognitoUserPoolClientCustomResourceFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${CognitoUserPoolClientCustomResourceFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - cognito-idp:CreateUserPoolClient
                  - cognito-idp:DeleteUserPoolClient
                Resource:
                  Fn::Sub: ${CognitoUserPool.Arn}
  
  CognitoUserPoolClientCustomResourceFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-CognitoUserPoolClientCustomResourceFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  CognitoUserPoolClient:
    Type: Custom::CognitoUserPoolClient
    Properties:
      ServiceToken:
        Fn::Sub: ${CognitoUserPoolClientCustomResourceFunction.Arn}
      UserPoolId:
        Fn::Sub: ${CognitoUserPool.Id}
      
  
  
  
  #
  #   Cognito Identity Pool
  #
  
  CognitoIdentityPoolCustomResourceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-CognitoIdentityPoolCustomResourceFunction
      Description: Used as a CloudFormation custom resource to manage a Cognito Identity Pool.
      Handler: index.lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - StackCrudOperation
      Role:
        Fn::Sub: ${CognitoIdentityPoolCustomResourceFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/CognitoIdentityPoolCustomResourceFunction.zip
      Environment:
        Variables:
          PROJECT_GLOBAL_PREFIX:
            Fn::Sub: ${ProjectGlobalPrefix.Prefix}
      Runtime: python2.7
      Timeout: 300
  
  CognitoIdentityPoolCustomResourceFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${CognitoIdentityPoolCustomResourceFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - cognito-identity:CreateIdentityPool
                Resource:
                  Fn::Sub: arn:aws:cognito-identity:${AWS::Region}:${AWS::AccountId}:identitypool/
              - Effect: Allow
                Action:
                  - cognito-identity:DeleteIdentityPool
                Resource:
                  Fn::Sub: arn:aws:cognito-identity:${AWS::Region}:${AWS::AccountId}:identitypool/*
  
  CognitoIdentityPoolCustomResourceFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-CognitoIdentityPoolCustomResourceFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  CognitoIdentityPool:
    Type: Custom::CognitoIdentityPool
    Properties:
      ServiceToken:
        Fn::Sub: ${CognitoIdentityPoolCustomResourceFunction.Arn}
      CognitoIdentityProviders:
        - ProviderName:
            Fn::Sub: ${CognitoUserPool.ProviderName}
          ClientId:
            Fn::Sub: ${CognitoUserPoolClient.Id}
      
  
  
  
  
  #
  #   Cognito Identity Pool Role Linker
  #   
  #   Links pre-created IAM roles to a pre-created Cognito Identity Pool.
  #
  #   Necessary to create user roles via CloudFormation with a trust policy 
  #   appropriately limited to the Cognito Identity pool they'll be using, 
  #   which is based on the custom resource output of the function that 
  #   creates the identity pool itself.
  #
  
  CognitoIdentityPoolRoleLinkerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-CognitoIdentityPoolRoleLinkerFunction
      Description: Links an API Gateway usage plan to a REST API / stage.
      Handler: index.lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - StackCrudOperation
      Role:
        Fn::Sub: ${CognitoIdentityPoolRoleLinkerFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/CognitoIdentityPoolRoleLinkerFunction.zip
      Runtime: python2.7
      Timeout: 300
  
  CognitoIdentityPoolRoleLinkerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CognitoIdentityPoolRoleLinkerFunctionRoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${CognitoIdentityPoolRoleLinkerFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - sts:PassRole
                Resource:
                  - Fn::Sub: ${CognitoAuthenticatedUserRole.Arn}
                  - Fn::Sub: ${CognitoUnauthenticatedUserRole.Arn}
              - Effect: Allow
                Action:
                  - cognito-identity:SetIdentityPoolRoles
                Resource:
                  Fn::Sub: ${CognitoIdentityPool.Arn}
  
  CognitoIdentityPoolRoleLinkerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-CognitoIdentityPoolRoleLinkerFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  CognitoIdentityPoolRoleLinkerInvocation:
    Type: Custom::CognitoIdentityPoolRoleLinkerInvocation
    Properties:
      ServiceToken:
        Fn::Sub: ${CognitoIdentityPoolRoleLinkerFunction.Arn}
      IdentityPoolId:
        Fn::Sub: ${CognitoIdentityPool.Id}
      UserRoles:
        AuthenticatedUserRole:
          Fn::Sub: ${CognitoAuthenticatedUserRole.Arn}
        UnauthenticatedUserRole:
          Fn::Sub: ${CognitoUnauthenticatedUserRole.Arn}
  
  
  
  
  #
  #   Swagger Template Preset Function
  #   
  #   Downloads a Swagger file from S3, replaces region and AWS account IDs 
  #   with the correct values, re-uploads the file and returns the S3 Bucket 
  #   and Key for the new template.
  #
  
  SwaggerTemplatePresetFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-SwaggerTemplatePresetFunction
      Description: Replaces Swagger template values to work for this AWS account / region.
      Handler: index.lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - StackCrudOperation
      Role:
        Fn::Sub: ${SwaggerTemplatePresetFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/SwaggerTemplatePresetFunction.zip
      Runtime: python2.7
      Timeout: 300
  
  SwaggerTemplatePresetFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${SwaggerTemplatePresetFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  Fn::Sub: arn:aws:s3:::${CloudFormationPresetVariables.S3SourceBucket}/swagger-apigateway.yaml
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  Fn::Sub: arn:aws:s3:::${SharedBucket}/swagger-apigateway/*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  Fn::Sub: arn:aws:s3:::${SharedBucket}
                Condition:
                  StringLike:
                    s3:prefix:
                      - swagger-apigateway/*
  
  SwaggerTemplatePresetFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-SwaggerTemplatePresetFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  SwaggerTemplatePresetInvocation:
    Type: Custom::SwaggerTemplatePresetInvocation
    Properties:
      ServiceToken:
        Fn::Sub: ${SwaggerTemplatePresetFunction.Arn}
      ApiDefinitionVersion:
        Ref: ApiDefinitionVersion
      OutputBucket:
        Ref: SharedBucket
      SourceBucket:
        Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
      SourceKey: swagger-apigateway.yaml
  
  
  
  #
  #   Stack Cleanup
  #   
  #   This function performs basic setup and cleanup functionality when the 
  #   stack is deleted.
  #   
  #   On delete:
  #     - Clears out shared S3 bucket
  #     - Deletes SNS topics
  #
  
  StackCleanupFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-StackCleanupFunction
      Description: Performs cleanup of associated resources on stack deletion.
      Handler: index.lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - StackCrudOperation
      Role:
        Fn::Sub: ${StackCleanupFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/StackCleanupFunction.zip
      Environment:
        Variables:
          PROJECT_GLOBAL_PREFIX:
            Fn::Sub: ${ProjectGlobalPrefix.Prefix}
      Runtime: python2.7
      Timeout: 300
  
  StackCleanupFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${StackCleanupFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - sqs:ListQueues
                Resource:
                  Fn::Sub: arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - sns:ListTopics
                Resource:
                  Fn::Sub: arn:aws:sns:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                Resource: 
                  Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
              - Effect: Allow
                Action:
                  - logs:DeleteLogGroup
                Resource: 
                  Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:sns/${AWS::Region}/${AWS::AccountId}/${ProjectGlobalPrefix.Prefix}-*
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - Fn::Sub: arn:aws:s3:::${SharedBucket}/*
                  - Fn::Sub: arn:aws:s3:::${StaticContentBucket}/*
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                Resource:
                  - Fn::Sub: arn:aws:s3:::${SharedBucket}/*
                  - Fn::Sub: arn:aws:s3:::${StaticContentBucket}/*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - Fn::Sub: arn:aws:s3:::${SharedBucket}
                  - Fn::Sub: arn:aws:s3:::${StaticContentBucket}
  
  StackCleanupFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-StackCleanupFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  StackCleanupInvocation:
    Type: Custom::StackCleanupInvocation
    Properties:
      ServiceToken:
        Fn::Sub: ${StackCleanupFunction.Arn}
      Bucket:
        Ref: SharedBucket
      BucketContentType: Default
  
  
  
  #
  #   Step Function State Machine
  #   
  #   CloudFormation custom resource for a Step Functions State Machine.
  #
  
  StepFunctionStateMachineCustomResourceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-StepFunctionStateMachineCustomResourceFunction
      Description: CloudFormation custom resource for a Step Functions State Machine.
      Handler: index.lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - StackCrudOperation
      Role:
        Fn::Sub: ${StepFunctionStateMachineCustomResourceFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/StepFunctionStateMachineCustomResourceFunction.zip
      Environment:
        Variables:
          PROJECT_GLOBAL_PREFIX:
            Fn::Sub: ${ProjectGlobalPrefix.Prefix}
      Runtime: python2.7
      Timeout: 300
  
  StepFunctionStateMachineCustomResourceFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: RoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${StepFunctionStateMachineCustomResourceFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - states:CreateStateMachine
                Resource:
                  Fn::Sub: arn:aws:states:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - states:DeleteStateMachine
                  - states:DescribeStateMachine
                  - states:ListExecutions
                Resource:
                  Fn::Sub: arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${ProjectGlobalPrefix.Prefix}-*
              - Effect: Allow
                Action:
                  - states:StopExecution
                Resource:
                  Fn::Sub: arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${ProjectGlobalPrefix.Prefix}-*
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - Fn::Sub: ${RoomLifecycleStateMachineRole.Arn}
  
  StepFunctionStateMachineCustomResourceFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-StepFunctionStateMachineCustomResourceFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  
  
  
  #
  #   API Gateway Lambda Setup Function
  #   
  #   Performs necessary API Gateway / Lambda setup.
  #     * Adds Lambda execution permissions to API Gateway endpoints
  #     * Adds necessary stage variables so function name mappings (from 
  #       Swagger for CORS) will work
  #     * Adds necessary stage variables so necessary CORS headers can be 
  #       resolved by each function
  #
  
  ApiGatewayLambdaSetupFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-ApiGatewayLambdaSetupFunction
      Description: Performs grunt work with linking API Gateway with Lambda functions
      Handler: index.lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - StackCrudOperation
      Role:
        Fn::Sub: ${ApiGatewayLambdaSetupFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/ApiGatewayLambdaSetupFunction.zip
      Runtime: python2.7
      Timeout: 300
  
  ApiGatewayLambdaSetupFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ApiGatewayLambdaSetupFunctionRoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${ApiGatewayLambdaSetupFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - apigateway:GET
                Resource:
                  - Fn::Sub: arn:aws:apigateway:${AWS::Region}::/restapis/${WebChatApi}/resources
                  - Fn::Sub: arn:aws:apigateway:${AWS::Region}::/restapis/${WebChatApi}/resources/*
              - Effect: Allow
                Action:
                  - apigateway:POST
                Resource:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}::/restapis/${WebChatApi}/deployments
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStackResource
                Resource:
                  Ref: AWS::StackId
              - Effect: Allow
                Action:
                  - lambda:AddPermission
                Resource:
                  - Fn::Sub: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectGlobalPrefix.Prefix}-*
              - Effect: Allow
                Action:
                  - apigateway:PATCH
                Resource:
                  - Fn::Sub: arn:aws:apigateway:${AWS::Region}::/restapis/${WebChatApi}/stages/${WebChatApiStage}
                  - Fn::Sub: arn:aws:apigateway:${AWS::Region}::/restapis/${WebChatApi}/resources/*/methods/*/integration/responses/*
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  Fn::Sub: arn:aws:s3:::${SharedBucket}/api-cors.json
  
  ApiGatewayLambdaSetupFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-ApiGatewayLambdaSetupFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  ApiGatewayLambdaSetupInvocation:
    Type: Custom::ApiGatewayLambdaSetupInvocation
    Properties:
      ServiceToken:
        Fn::Sub: ${ApiGatewayLambdaSetupFunction.Arn}
      Bucket:
        Ref: SharedBucket
      CorsOriginList:
        Fn::Sub: ${CorsOriginListVariable.CorsOriginList}
      RestApi:
        Ref: WebChatApi
      StageName:
        Ref: WebChatApiStage
      StageVariables:
        AwsAccountId:
          Ref: AWS::AccountId
        AwsRegion:
          Ref: AWS::Region
      ApiSwaggerDefinitionKey:
        Fn::Sub: ${SwaggerTemplatePresetInvocation.OutputKey}
    DependsOn:
      - StackCleanupInvocation
      - RoomGeneratorFunction
      - RoomMessageAcknowledgerFunction
      - RoomMessageLogFetcherFunction
      - RoomMessagePollerFunction
      - RoomMessagePosterFunction
      - RoomSessionGeneratorFunction
      - UserApiKeyResetHandlerFunction
      - UserChangePasswordHandlerFunction
      - UserForgotPasswordHandlerFunction
      - UserLoginHandlerFunction
      - UserEmailAddressVerificationHandlerFunction
      - UserRegistrationRequestHandlerFunction
      - UserUpdateHandlerFunction
  
  
  
  
  
  #
  #   User Resource Cleanup
  #   
  #   This function cleans up user-specific resources on stack deletion.
  #     
  #     * API keys created for each user
  #
  
  UserResourceCleanupFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-UserResourceCleanupFunction
      Description: Cleans up user-specific resources on resource deletion
      Handler: index.lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - StackCrudOperation
      Role:
        Fn::Sub: ${UserResourceCleanupFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/UserResourceCleanupFunction.zip
      Runtime: python2.7
      Timeout: 300
  
  UserResourceCleanupFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: UserResourceCleanupFunctionRoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${UserResourceCleanupFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - cognito-identity:ListIdentities
                Resource:
                  Fn::Sub: ${CognitoIdentityPool.Arn}
              - Effect: Allow
                Action:
                  - cognito-sync:ListRecords
                Resource:
                  Fn::Sub:
                    - ${CognitoIdentityPool.SyncArn}/identity/*/dataset/${CognitoIdentityUserProfileDatasetName}
                    - CognitoIdentityUserProfileDatasetName:
                        Fn::FindInMap:
                          - StaticVariables
                          - Main
                          - CognitoIdentityUserProfileDatasetName
              - Effect: Allow
                Action:
                  - cognito-identity:DeleteIdentities
                Resource:
                  Fn::Sub: arn:aws:cognito-identity:${AWS::Region}:${AWS::AccountId}:identitypool/
              - Effect: Allow
                Action:
                  - apigateway:DELETE
                Resource:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}::/apikeys/*
  
  UserResourceCleanupFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-UserResourceCleanupFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  UserResourceCleanupInvocation:
    Type: Custom::UserResourceCleanupInvocation
    Properties:
      ServiceToken:
        Fn::Sub: ${UserResourceCleanupFunction.Arn}
      CognitoIdentityPoolId:
        Fn::Sub: ${CognitoIdentityPool.Id}
      CognitoIdentityUserProfileDatasetName:
        Fn::FindInMap:
          - StaticVariables
          - Main
          - CognitoIdentityUserProfileDatasetName
    DependsOn:
      - CognitoIdentityPool
      
    
  #
  #   Static Content Bucket
  #   
  #   Hosts uploaded static web content (html, js, css).
  #

  StaticContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        ErrorDocument: error.html
        IndexDocument: index.html

  StaticContentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: StaticContentBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Principal: '*'
            Resource:
              Fn::Sub: arn:aws:s3:::${StaticContentBucket}/*
          - Action: s3:ListBucket
            Effect: Allow
            Principal: '*'
            Resource:
              Fn::Sub: arn:aws:s3:::${StaticContentBucket}
  
  StaticWebSiteBucketCleanup:
    Type: Custom::StaticWebSiteBucketCleanupInvocation
    Properties:
      ServiceToken:
        Fn::Sub: ${StackCleanupFunction.Arn}
      Bucket:
        Ref: StaticContentBucket
      BucketContentType: 'Static Content'
  
  
  #
  #   S3 Static Web Content Deployer
  #   
  #   Used to deploy the static web content at stack creation.
  #
  
  S3StaticWebContentDeployerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-S3StaticWebContentDeployerFunction
      Description: Links an API Gateway usage plan to a REST API / stage.
      Handler: index.lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - StackCrudOperation
      Role:
        Fn::Sub: ${S3StaticWebContentDeployerFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/S3StaticWebContentDeployerFunction.zip
      Runtime: python2.7
      Timeout: 300
  
  S3StaticWebContentDeployerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: S3StaticWebContentDeployerFunctionRoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${S3StaticWebContentDeployerFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  Fn::Sub: arn:aws:s3:::${CloudFormationPresetVariables.S3SourceBucket}/web-static.zip
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  Fn::Sub: arn:aws:s3:::${StaticContentBucket}/*
  
  S3StaticWebContentDeployerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-S3StaticWebContentDeployerFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  S3StaticWebContentDeployerInvocation:
    Type: Custom::S3StaticWebContentDeployerInvocation
    Properties:
      ServiceToken:
        Fn::Sub: ${S3StaticWebContentDeployerFunction.Arn}
      Source:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: web-static.zip
      Target:
        S3Bucket:
          Ref: StaticContentBucket
        S3KeyPrefix: ""
  
  #
  #   S3 Object Writer
  #   
  #   Generic Lambda function for easily creating / deleting arbitrary text 
  #   content as an S3 object.
  #
  
  S3ObjectWriterFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-S3ObjectWriterFunction
      Description: Used as a CloudFormation custom resource for writing an object to S3.
      Handler: index.lambda_handler
      MemorySize:
        Fn::FindInMap:
          - StaticVariables
          - LambdaMemoryClasses
          - StackCrudOperation
      Role:
        Fn::Sub: ${S3ObjectWriterFunctionRole.Arn}
      Code:
        S3Bucket:
          Fn::Sub: ${CloudFormationPresetVariables.S3SourceBucket}
        S3Key: lambda/S3ObjectWriterFunction.zip
      Runtime: python2.7
      Timeout: 300
  
  S3ObjectWriterFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: S3ObjectWriterFunctionRoleActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  Fn::Sub: ${S3ObjectWriterFunctionLogGroup.Arn}
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  Fn::Sub: arn:aws:s3:::${StaticContentBucket}/api/endpoint.js
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                Resource:
                  Fn::Sub: arn:aws:s3:::${StaticContentBucket}/api/endpoint.js
  
  S3ObjectWriterFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${ProjectGlobalPrefix.Prefix}-S3ObjectWriterFunction
      RetentionInDays:
        Ref: LogRetentionDays
  
  #
  #   WebChatApiPointerJsFile
  #
  #   Because our web interface is hosted in its own S3 bucket, it will need 
  #   some way of finding the URL of where the API lives.
  #   
  #   This creates a JavaScript file that simply defines a variable that 
  #   points to the endpoint. Now the web interface can simply include that 
  #   JavaScript file and reference the variable to know where to make 
  #   requests.
  #   
  #   It also deletes that file on deletion of itself.
  #
  
  WebChatApiPointerJsFileForStaticWebsiteBucket:
    Type: Custom::WebChatApiPointerJsFile
    Properties:
      ServiceToken:
        Fn::Sub: ${S3ObjectWriterFunction.Arn}
      Bucket:
        Ref: StaticContentBucket
      Key: api/endpoint.js
      Content:
        Fn::Sub:
          - |-
            /*
                This represents the only pointer the web interface has to the 
                REST API's endpoint.
            */
            var GlobalWebChatApiEndpoint = "${RestApiEndpoint}";
          - RestApiEndpoint:
              Fn::If:
                - CustomApiBaseUrlSpecifiedCondition
                - Ref: CustomApiBaseUrl
                - Fn::Sub:
                  - https://${WebChatApi}.execute-api.${AWS::Region}.amazonaws.com/${MainStageName}/
                  - MainStageName:
                      Fn::FindInMap:
                      - StaticVariables
                      - Main
                      - StageName
              
      Content-Type: text/javascript
    
    
    
  #
  #   CloudFormation Input Echo
  #   
  #   Just returns what it's given.
  #   Useful to avoid duplicating CloudFormation variable definition logic 
  #   all over the place.
  #

  CloudFormationInputEchoFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-CloudFormationInputEchoFunction
      Description: |-
        Used as a CloudFormation custom resource to simply return what it's 
        given.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::Sub: ${CloudFormationInputEchoFunctionRole.Arn}
      Code:
        ZipFile: |-
          import cfnresponse
          def lambda_handler(event, context):
              cfnresponse.send(event, context, cfnresponse.SUCCESS, event.get("ResourceProperties", {}), None)
      Runtime: python2.7
      Timeout: 300

  CloudFormationInputEchoFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
  
  CloudFormationPresetVariables:
    Type: Custom::CloudFormationPresetVariables
    Properties:
      ServiceToken:
        Fn::Sub: ${CloudFormationInputEchoFunction.Arn}
      S3SourceBucket:
        Fn::If:
          - SourceTypeIsS3BucketCondition
          - Ref: S3SourceName
          - Fn::ImportValue:
              Fn::Sub: '${S3SourceName}-S3Bucket'
  
  CorsOriginListVariable:
    Type: Custom::CloudFormationVariable
    Properties:
      ServiceToken:
        Fn::Sub: ${CloudFormationInputEchoFunction.Arn}
      CorsOriginList:
        Fn::If:
          - IncludeBucketSiteInCorsOriginCondition
          - Fn::Join:
              - ','
              - - Fn::Sub: ${StaticContentBucket.WebsiteURL}
                - Fn::If:
                   - NoAdditionalCorsOriginsSpecifiedCondition
                   - Ref: AWS::NoValue
                   - Fn::Join:
                       - ','
                       - Ref: AdditionalCorsOrigins
          - Fn::Join:
              - ','
              - Ref: AdditionalCorsOrigins
  
  
  
  
  SimpleStringReplaceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectGlobalPrefix.Prefix}-SimpleStringReplaceFunction
      Description: |-
        Used as a CloudFormation custom resource to make a simple string 
        replacement.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::Sub: ${SimpleStringReplaceFunctionRole.Arn}
      Code:
        ZipFile: |-
          import cfnresponse
          def lambda_handler(event, context):
              resource_props = event["ResourceProperties"]
              response_dict = {
                  "Output": resource_props["Input"].replace(
                      resource_props["OldSubstring"],
                      resource_props.get("NewSubstring", "")
                  )
              }
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_dict, None)
      Runtime: python2.7
      Timeout: 300

  SimpleStringReplaceFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
  
  CorsOriginListEscaped:
    Type: Custom::StringReplacement
    Properties:
      ServiceToken:
        Fn::Sub: ${SimpleStringReplaceFunction.Arn}
      Input:
        Fn::Sub: ${CorsOriginListVariable.CorsOriginList}
      OldSubstring: ','
      NewSubstring: ';'
  
  
  #
  #   Stack Global Prefix Generator
  #   
  #   For proper IAM restrictions, it helps to have a unique prefix. For 
  #   example:
  #     arn:sqs:us-east-1:000011112222:MyUniquePrefix-*
  #   
  #   Normally I'd use the stack name, but it can be up to 128 characters. 
  #   That means I risk exceeding the 80 character limits for an SQS queue 
  #   name (for example) if I just use that.
  #   
  #   This function just generates a unique global prefix that can be used 
  #   by all resources to indicate "this resource belongs to this stack / 
  #   project deployment".
  #
  
  ProjectGlobalPrefixGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Generates a short sufficiently-random string for stack resources.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::Sub: ${ProjectGlobalPrefixGeneratorFunctionRole.Arn}
      Code:
        ZipFile: |-
          import random
          import string
          import cfnresponse
          
          # The zbase32 alphabet.
          prefix_characters = "ybndrfg8ejkmcpqxot1uwisza345h769"
          
          def lambda_handler(event, context):
              response_dict = {
                  "Prefix": random.choice(string.ascii_lowercase) + ''.join(random.choice(prefix_characters) for _ in range(5))
              }
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_dict, None)
      Runtime: python2.7
      Timeout: 300

  ProjectGlobalPrefixGeneratorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
  
  ProjectGlobalPrefix:
    Type: Custom::ProjectGlobalPrefixGeneration
    Properties:
      ServiceToken:
        Fn::Sub: ${ProjectGlobalPrefixGeneratorFunction.Arn}
    
          
Outputs:
  WebChatApi:
    Value:
      Fn::Sub:
        - https://${WebChatApi}.execute-api.${AWS::Region}.amazonaws.com/${MainStageName}/
        - MainStageName:
            Fn::FindInMap:
            - StaticVariables
            - Main
            - StageName
  WebChatHome:
    Value:
      Fn::Sub:
        - ${WebChatHome}/
        - WebChatHome:
            Fn::Sub: ${StaticContentBucket.WebsiteURL}