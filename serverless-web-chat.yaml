---
AWSTemplateFormatVersion: '2010-09-09'
Description: A serverless web chat portal.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Configuration
      Parameters:
      - LambdaPackageStackName
      - MetricAlarmEmailAddress
      - PreWarmingEnabled
      - LogRetentionDays
    ParameterLabels:
      LambdaPackageStackName:
        default: Lambda Package Stack Name
      LogRetentionDays:
        default: Log Retention (days)
      MetricAlarmEmailAddress:
        default: Alarm E-mail Address
      PreWarmingEnabled:
        default: Pre-Warming Enabled
Parameters:
  LambdaPackageStackName:
    Type: String
    Default: webchat-lambda-src
    Description: Name of the CloudFormation stack containing Lambda packages (deployed by boa-nimbus).
    MinLength: 1
  LogRetentionDays:
    Type: String
    Default: '14'
    AllowedValues:
    - ''
    - '1'
    - '3'
    - '5'
    - '7'
    - '14'
    - '30'
    - '60'
    - '90'
    - '120'
    - '150'
    - '180'
    - '365'
    - '400'
    - '545'
    - '731'
    - '1827'
    - '3653'
  MetricAlarmEmailAddress:
    Type: String
    Description: In case of errors. Leave blank to disable.
  PreWarmingEnabled:
    Type: String
    Description: Ping resources each minute to keep initial response times fast.
    Default: 'Yes'
    AllowedValues:
    - 'Yes'
    - 'No'
Mappings:
  StaticVariables:
    Main:
      ApiGatewayErrorMappingTemplate: |-
        #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
        #set ($bodyObj = $util.parseJson($input.body))
        {
            "message": "$util.escapeJavaScript("$errorMessageObj.message")"
        }
      DummyStageName: DummyStage
      PreWarmScheduleExpression: rate(1 minute)
      StageName: v1
Conditions:
  IncludeMetricAlarmsCondition:
    Fn::Not:
    - Fn::Equals:
      - Ref: MetricAlarmEmailAddress
      - ''
  PreWarmingEnabledCondition:
    Fn::Equals:
    - Ref: PreWarmingEnabled
    - 'Yes'
Resources:
  
  #
  #   S3 Bucket
  #   
  #   Shared among various resources.
  #
  
  SharedBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName:
        Fn::Sub: "webchat-sharedbucket-${WebChatApi}"
  
  #  
  #   API Gateway - Global Account resources
  #  
  
  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
        - ApiGatewayCloudWatchRole
        - Arn
  
  #  
  #   API Gateway - REST API resources
  #  
  
  WebChatApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Ref: AWS::StackName
      Description: REST API for web chats.
  
  WebChatApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: WebChatApi
      StageName:
        Fn::FindInMap:
        - StaticVariables
        - Main
        - DummyStageName
    DependsOn:
    - WebChatApiDummyStageLogGroup
    - WebChatApiRoomCreateMethod
    - WebChatApiUserIdCreateMethod
    - WebChatApiRoomMessageGetMethod
    - WebChatApiRoomMessagePostMethod
  
  WebChatApiDummyStageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub:
        - API-Gateway-Execution-Logs_${WebChatApi}/${DummyStageName}
        - DummyStageName:
            Fn::FindInMap:
            - StaticVariables
            - Main
            - DummyStageName
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: WebChatApiDeployment
      MethodSettings:
      - ResourcePath: ''
        HttpMethod: "*/*"
        DataTraceEnabled: true
        LoggingLevel: INFO
        MetricsEnabled:
          Fn::If:
          - IncludeMetricAlarmsCondition
          - true
          - false
      RestApiId:
        Ref: WebChatApi
      StageName:
        Fn::FindInMap:
        - StaticVariables
        - Main
        - StageName
    DependsOn:
    - WebChatApiMainStageLogGroup
  
  WebChatApiMainStageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub:
        - API-Gateway-Execution-Logs_${WebChatApi}/${MainStageName}
        - MainStageName:
            Fn::FindInMap:
            - StaticVariables
            - Main
            - StageName
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiRoomResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - WebChatApi
        - RootResourceId
      PathPart: room
      RestApiId:
        Ref: WebChatApi
  
  WebChatApiSingleRoomResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: WebChatApiRoomResource
      PathPart: '{room-id}'
      RestApiId:
        Ref: WebChatApi
  
  WebChatApiSingleRoomMessageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: WebChatApiSingleRoomResource
      PathPart: 'message'
      RestApiId:
        Ref: WebChatApi
  
  WebChatApiSingleRoomSessionResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: WebChatApiSingleRoomResource
      PathPart: 'session'
      RestApiId:
        Ref: WebChatApi
  
  WebChatApiSingleRoomSingleSessionResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: WebChatApiSingleRoomSessionResource
      PathPart: '{session-id}'
      RestApiId:
        Ref: WebChatApi
  
  WebChatApiSingleRoomSingleSessionMessageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: WebChatApiSingleRoomSingleSessionResource
      PathPart: 'message'
      RestApiId:
        Ref: WebChatApi
  
  WebChatApiUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - WebChatApi
        - RootResourceId
      PathPart: user
      RestApiId:
        Ref: WebChatApi
  
  #
  #   SNS Delivery Status Resources
  #
  
  SNSFailureFeedbackRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - sns.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: SNSFailureFeedbackRoleActions
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:PutMetricFilter
            Resource: '*'
  
  SNSSuccessFeedbackRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - sns.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: SNSSuccessFeedbackRoleActions
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:PutMetricFilter
            Resource: '*'
    
  #  
  #   Room Generator Function
  #  
    
  RoomGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Generates a unique identifier for a chat room.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - RoomGeneratorFunctionRole
        - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/RoomGeneratorFunction.zip
      Runtime: python2.7
      Timeout: '300'
  
  RoomGeneratorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  
  RoomGeneratorFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RoomGeneratorFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${RoomGeneratorFunction}:log-stream:*
        - Effect: Allow
          Action: 
          - sns:CreateTopic
          Resource: '*'
        - Effect: Allow
          Action: 
          - sns:SetTopicAttributes
          Resource: 
            Fn::Sub:
            - arn:aws:sns:${AWS::Region}:${AWS::AccountId}:web-chat-${WebChatApi}-${WebChatApiStageName}-*
            - WebChatApiStageName:
                Fn::FindInMap:
                - StaticVariables
                - Main
                - StageName
        - Effect: Allow
          Action: 
          - logs:CreateLogGroup
          - logs:PutMetricFilter
          Resource: 
            Fn::Sub:
            - arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:sns/${AWS::Region}/${AWS::AccountId}/web-chat-${WebChatApi}-${WebChatApiStageName}-*
            - WebChatApiStageName:
                Fn::FindInMap:
                - StaticVariables
                - Main
                - StageName
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
            Fn::Sub: arn:aws:s3:::${SharedBucket}/room-topics/*
        - Effect: Allow
          Action:
          - apigateway:GET
          Resource:
            Fn::Sub: arn:aws:apigateway:${AWS::Region}::/domainnames/*/basepathmappings
      Roles:
      - Ref: RoomGeneratorFunctionRole
  
  RoomGeneratorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${RoomGeneratorFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiRoomCreateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiRoomResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - SelectionPattern: ''
          StatusCode: '200'
        - ResponseTemplates:
            application/json: |-
              {
                  "type": "InternalServerError",
                  "message": "The backend server encountered an internal error."
              }
          SelectionPattern: (\n|.)+
          StatusCode: '500'
        - ResponseTemplates:
            application/json: |-
              {
                  "type": "InternalServerTimeout",
                  "message": "The backend server did not respond quickly enough."
              }
          SelectionPattern: ".*Task timed out after .*"
          StatusCode: '504'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json:
            Fn::Sub:
              - |-
                #set($allParams = $input.params())
                {
                    "request-body": $input.json("$"),
                    "request-params" : {
                        #foreach($type in $allParams.keySet())
                        #set($params = $allParams.get($type))
                        "$type" : {
                            #foreach($paramName in $params.keySet())
                            "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                            #if($foreach.hasNext),#end
                            #end
                        }
                        #if($foreach.hasNext),#end
                        #end
                    },
                    "api-id": "$context.apiId",
                    "resource-path": "$context.resourcePath",
                    "stage": "$context.stage",
                    
                    "delete-function-role": "${CleanupFunctionRoleArn}",
                    "publish-function-role": "${PosterFunctionRoleArn}",
                    "subscribe-function-role": "${RoomSessionGeneratorFunctionRoleArn}",
                    "sns-failure-feedback-role": "${SNSFailureFeedbackRoleArn}",
                    "sns-success-feedback-role": "${SNSSuccessFeedbackRoleArn}"
                }
              - CleanupFunctionRoleArn:
                  Fn::GetAtt:
                  - StackCleanupFunctionRole
                  - Arn
                PosterFunctionRoleArn:
                  Fn::GetAtt:
                  - RoomMessagePosterFunctionRole
                  - Arn
                RoomSessionGeneratorFunctionRoleArn:
                  Fn::GetAtt:
                  - RoomSessionGeneratorFunctionRole
                  - Arn
                SNSFailureFeedbackRoleArn:
                  Fn::GetAtt:
                  - SNSFailureFeedbackRole
                  - Arn
                SNSSuccessFeedbackRoleArn:
                  Fn::GetAtt:
                  - SNSSuccessFeedbackRole
                  - Arn
        Type: AWS
        Uri:
          Fn::Sub:
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RoomGeneratorFunctionArn}/invocations
          - RoomGeneratorFunctionArn:
              Fn::GetAtt:
              - RoomGeneratorFunction
              - Arn
      MethodResponses:
      - StatusCode: '200'
      - StatusCode: '500'
      - StatusCode: '504'
    DependsOn:
    - WebChatApiRoomCreateMethodRoomGeneratorLambdaPermission
  
  WebChatApiRoomCreateMethodRoomGeneratorLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomGeneratorFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/*/POST/room
    DependsOn:
    - RoomGeneratorFunctionRoleActions
    - RoomGeneratorFunctionLogGroup
  
  PreWarmApiCloudWatchRoomGeneratorFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: PreWarmingEnabledCondition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomGeneratorFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - PreWarmApiEventRule
        - Arn
    DependsOn:
    - RoomGeneratorFunctionRoleActions
    - RoomGeneratorFunctionLogGroup
  
  
  #  
  #   User ID Generator Function
  #  
    
  UserIdGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Generates a unique identifier for a user.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - UserIdGeneratorFunctionRole
        - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/UserIdGeneratorFunction.zip
          
      Runtime: python2.7
      Timeout: '300'
  
  UserIdGeneratorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  
  UserIdGeneratorFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: UserIdGeneratorFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${UserIdGeneratorFunction}:log-stream:*
        - Effect: Allow
          Action:
          - apigateway:GET
          Resource:
            Fn::Sub: arn:aws:apigateway:${AWS::Region}::/domainnames/*/basepathmappings
      Roles:
      - Ref: UserIdGeneratorFunctionRole
  
  UserIdGeneratorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${UserIdGeneratorFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiUserIdCreateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiUserResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - SelectionPattern: ''
          StatusCode: '200'
        - ResponseTemplates:
            application/json: |-
              {
                  "type": "InternalServerError",
                  "message": "The backend server encountered an internal error."
              }
          SelectionPattern: (\n|.)+
          StatusCode: '500'
        - ResponseTemplates:
            application/json: |-
              {
                  "type": "InternalServerTimeout",
                  "message": "The backend server did not respond quickly enough."
              }
          SelectionPattern: ".*Task timed out after .*"
          StatusCode: '504'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json:
            Fn::Sub: |-
              #set($allParams = $input.params())
              {
                  "request-body": $input.json("$"),
                  "request-params" : {
                      #foreach($type in $allParams.keySet())
                      #set($params = $allParams.get($type))
                      "$type" : {
                          #foreach($paramName in $params.keySet())
                          "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                          #if($foreach.hasNext),#end
                          #end
                      }
                      #if($foreach.hasNext),#end
                      #end
                  },
                  "api-id": "$context.apiId",
                  "resource-path": "$context.resourcePath",
                  "stage": "$context.stage"
              }
        Type: AWS
        Uri:
          Fn::Sub:
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserIdGeneratorFunctionArn}/invocations
          - UserIdGeneratorFunctionArn:
              Fn::GetAtt:
              - UserIdGeneratorFunction
              - Arn
      MethodResponses:
      - StatusCode: '200'
      - StatusCode: '500'
      - StatusCode: '504'
    DependsOn:
    - WebChatApiUserIdCreateMethodUserIdGeneratorLambdaPermission
  
  WebChatApiUserIdCreateMethodUserIdGeneratorLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: UserIdGeneratorFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/*/POST/user
    DependsOn:
    - UserIdGeneratorFunctionRoleActions
    - UserIdGeneratorFunctionLogGroup
  
  PreWarmApiCloudWatchUserIdGeneratorFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: PreWarmingEnabledCondition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: UserIdGeneratorFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - PreWarmApiEventRule
        - Arn
    DependsOn:
    - UserIdGeneratorFunctionRoleActions
    - UserIdGeneratorFunctionLogGroup
  
  
  
  #  
  #   Room Session ID Generator Function
  #  
    
  RoomSessionGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Generates a unique identifier for a user.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - RoomSessionGeneratorFunctionRole
        - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/RoomSessionGeneratorFunction.zip
          
      Runtime: python2.7
      Timeout: '300'
  
  RoomSessionGeneratorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  
  RoomSessionGeneratorFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RoomSessionGeneratorFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${RoomSessionGeneratorFunction}:log-stream:*
        - Effect: Allow
          Action:
          - sqs:CreateQueue
          - sqs:GetQueueAttributes
          Resource: '*'
        - Effect: Allow
          Action:
          - s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${SharedBucket}/room-topics/*
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
            Fn::Sub: arn:aws:s3:::${SharedBucket}/room-queues/*
        - Effect: Allow
          Action:
          - apigateway:GET
          Resource:
            Fn::Sub: arn:aws:apigateway:${AWS::Region}::/domainnames/*/basepathmappings
      Roles:
      - Ref: RoomSessionGeneratorFunctionRole
  
  RoomSessionGeneratorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${RoomSessionGeneratorFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiRoomSessionCreateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiSingleRoomSessionResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - SelectionPattern: ''
          StatusCode: '200'
        - ResponseTemplates:
            application/json: |-
              {
                  "type": "InternalServerError",
                  "message": "The backend server encountered an internal error."
              }
          SelectionPattern: (\n|.)+
          StatusCode: '500'
        - ResponseTemplates:
            application/json: |-
              {
                  "type": "InternalServerTimeout",
                  "message": "The backend server did not respond quickly enough."
              }
          SelectionPattern: ".*Task timed out after .*"
          StatusCode: '504'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json:
            Fn::Sub: 
            - |-
              #set($allParams = $input.params())
              {
                  "request-body": $input.json("$"),
                  "request-params" : {
                      #foreach($type in $allParams.keySet())
                      #set($params = $allParams.get($type))
                      "$type" : {
                          #foreach($paramName in $params.keySet())
                          "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                          #if($foreach.hasNext),#end
                          #end
                      }
                      #if($foreach.hasNext),#end
                      #end
                  },
                  "api-id": "$context.apiId",
                  "resource-path": "$context.resourcePath",
                  "stage": "$context.stage",
                  
                  "acknowledger-function-role": "${AcknowledgerFunctionRoleArn}",
                  "delete-function-role": "${StackCleanupFunctionRoleArn}",
                  "poller-function-role": "${PollerFunctionRoleArn}"
              }
            - AcknowledgerFunctionRoleArn:
                Fn::GetAtt:
                - RoomMessageAcknowledgerFunctionRole
                - Arn
              PollerFunctionRoleArn:
                Fn::GetAtt:
                - RoomMessagePollerFunctionRole
                - Arn
              StackCleanupFunctionRoleArn:
                Fn::GetAtt:
                - StackCleanupFunctionRole
                - Arn
        Type: AWS
        Uri:
          Fn::Sub:
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RoomSessionGeneratorFunctionArn}/invocations
          - RoomSessionGeneratorFunctionArn:
              Fn::GetAtt:
              - RoomSessionGeneratorFunction
              - Arn
      MethodResponses:
      - StatusCode: '200'
      - StatusCode: '500'
      - StatusCode: '504'
    DependsOn:
    - WebChatApiRoomSessionCreateMethodRoomSessionGeneratorLambdaPermission
  
  WebChatApiRoomSessionCreateMethodRoomSessionGeneratorLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomSessionGeneratorFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/*/POST/room/{room-id}/session
    DependsOn:
    - RoomSessionGeneratorFunctionRoleActions
    - RoomSessionGeneratorFunctionLogGroup
  
  PreWarmApiCloudWatchRoomSessionGeneratorFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: PreWarmingEnabledCondition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomSessionGeneratorFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - PreWarmApiEventRule
        - Arn
    DependsOn:
    - RoomSessionGeneratorFunctionRoleActions
    - RoomSessionGeneratorFunctionLogGroup
  
  
  #  
  #   Room Message Poller Function
  #  
    
  RoomMessagePollerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Returns any new messages sent to the requested room.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - RoomMessagePollerFunctionRole
        - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/RoomMessagePollerFunction.zip
      Runtime: python2.7
      Timeout: '300'
  
  RoomMessagePollerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  
  RoomMessagePollerFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RoomMessagePollerFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${RoomMessagePollerFunction}:log-stream:*
      Roles:
      - Ref: RoomMessagePollerFunctionRole
  
  RoomMessagePollerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${RoomMessagePollerFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiRoomMessageGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiSingleRoomSingleSessionMessageResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - SelectionPattern: ''
          StatusCode: '200'
        - ResponseTemplates:
            application/json:
              Fn::FindInMap:
              - StaticVariables
              - Main
              - ApiGatewayErrorMappingTemplate
          SelectionPattern: '.*http-status\":\w*400.*'
          StatusCode: '400'
        - ResponseTemplates:
            application/json: |-
              {
                  "type": "InternalServerError",
                  "message": "The backend server encountered an internal error."
              }
          SelectionPattern: (\n|.)+
          StatusCode: '500'
        - ResponseTemplates:
            application/json: |-
              {
                  "type": "InternalServerTimeout",
                  "message": "The backend server did not respond quickly enough."
              }
          SelectionPattern: ".*Task timed out after .*"
          StatusCode: '504'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json:
            Fn::Sub: |-
              #set($allParams = $input.params())
              {
                  "request-body": $input.json("$"),
                  "request-params" : {
                      #foreach($type in $allParams.keySet())
                      #set($params = $allParams.get($type))
                      "$type" : {
                          #foreach($paramName in $params.keySet())
                          "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                          #if($foreach.hasNext),#end
                          #end
                      }
                      #if($foreach.hasNext),#end
                      #end
                  },
                  "api-id": "$context.apiId",
                  "resource-path": "$context.resourcePath",
                  "stage": "$context.stage"
              }
        Type: AWS
        Uri:
          Fn::Sub:
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RoomMessagePollerFunctionArn}/invocations
          - RoomMessagePollerFunctionArn:
              Fn::GetAtt:
              - RoomMessagePollerFunction
              - Arn
      MethodResponses:
      - StatusCode: '200'
      - StatusCode: '400'
      - StatusCode: '500'
      - StatusCode: '504'
    DependsOn:
    - WebChatApiRoomMessageGetMethodRoomMessagePollerLambdaPermission
  
  WebChatApiRoomMessageGetMethodRoomMessagePollerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomMessagePollerFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/*/GET/room/{room-id}/session/{session-id}/message
    DependsOn:
    - RoomMessagePollerFunctionRoleActions
    - RoomMessagePollerFunctionLogGroup
  
  PreWarmApiCloudWatchRoomMessagePollerFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: PreWarmingEnabledCondition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomMessagePollerFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - PreWarmApiEventRule
        - Arn
    DependsOn:
    - RoomMessagePollerFunctionRoleActions
    - RoomMessagePollerFunctionLogGroup
  
  
  
  #  
  #   Room Message Acknowledger Function
  #  
    
  RoomMessageAcknowledgerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Returns any new messages sent to the requested room.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - RoomMessageAcknowledgerFunctionRole
        - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/RoomMessageAcknowledgerFunction.zip
      Runtime: python2.7
      Timeout: '300'
  
  RoomMessageAcknowledgerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  
  RoomMessageAcknowledgerFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RoomMessageAcknowledgerFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${RoomMessageAcknowledgerFunction}:log-stream:*
      Roles:
      - Ref: RoomMessageAcknowledgerFunctionRole
  
  RoomMessageAcknowledgerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${RoomMessageAcknowledgerFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiRoomMessageAcknowledgeMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiSingleRoomSingleSessionMessageResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: PUT
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - SelectionPattern: ''
          StatusCode: '200'
        - ResponseTemplates:
            application/json:
              Fn::FindInMap:
              - StaticVariables
              - Main
              - ApiGatewayErrorMappingTemplate
          SelectionPattern: '.*http-status\":\w*400.*'
          StatusCode: '400'
        - ResponseTemplates:
            application/json: |-
              {
                  "type": "InternalServerError",
                  "message": "The backend server encountered an internal error."
              }
          SelectionPattern: (\n|.)+
          StatusCode: '500'
        - ResponseTemplates:
            application/json: |-
              {
                  "type": "InternalServerTimeout",
                  "message": "The backend server did not respond quickly enough."
              }
          SelectionPattern: ".*Task timed out after .*"
          StatusCode: '504'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json:
            Fn::Sub: |-
              #set($allParams = $input.params())
              {
                  "request-body": $input.json("$"),
                  "request-params" : {
                      #foreach($type in $allParams.keySet())
                      #set($params = $allParams.get($type))
                      "$type" : {
                          #foreach($paramName in $params.keySet())
                          "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                          #if($foreach.hasNext),#end
                          #end
                      }
                      #if($foreach.hasNext),#end
                      #end
                  },
                  "api-id": "$context.apiId",
                  "resource-path": "$context.resourcePath",
                  "stage": "$context.stage"
              }
        Type: AWS
        Uri:
          Fn::Sub:
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RoomMessageAcknowledgerFunctionArn}/invocations
          - RoomMessageAcknowledgerFunctionArn:
              Fn::GetAtt:
              - RoomMessageAcknowledgerFunction
              - Arn
      MethodResponses:
      - StatusCode: '200'
      - StatusCode: '400'
      - StatusCode: '500'
      - StatusCode: '504'
    DependsOn:
    - WebChatApiRoomMessageAcknowledgeMethodRoomMessageAcknowledgerLambdaPermission
  
  WebChatApiRoomMessageAcknowledgeMethodRoomMessageAcknowledgerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomMessageAcknowledgerFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/*/PUT/room/{room-id}/session/{session-id}/message
    DependsOn:
    - RoomMessageAcknowledgerFunctionRoleActions
    - RoomMessageAcknowledgerFunctionLogGroup
  
  PreWarmApiCloudWatchRoomMessageAcknowledgerFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: PreWarmingEnabledCondition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomMessageAcknowledgerFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - PreWarmApiEventRule2
        - Arn
    DependsOn:
    - RoomMessageAcknowledgerFunctionRoleActions
    - RoomMessageAcknowledgerFunctionLogGroup
  
  
  #  
  #   Room Message Poster Function
  #  
    
  RoomMessagePosterFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Returns any new messages sent to the requested room.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - RoomMessagePosterFunctionRole
        - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/RoomMessagePosterFunction.zip
          
      Runtime: python2.7
      Timeout: '300'
  
  RoomMessagePosterFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  
  RoomMessagePosterFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RoomMessagePosterFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${RoomMessagePosterFunction}:log-stream:*
        - Effect: Allow
          Action:
          - s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${SharedBucket}/room-topics/*
      Roles:
      - Ref: RoomMessagePosterFunctionRole
  
  RoomMessagePosterFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${RoomMessagePosterFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiRoomMessagePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiSingleRoomMessageResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - SelectionPattern: ''
          StatusCode: '200'
        - ResponseTemplates:
            application/json:
              Fn::FindInMap:
              - StaticVariables
              - Main
              - ApiGatewayErrorMappingTemplate
          SelectionPattern: '.*http-status\":\w*400.*'
          StatusCode: '400'
        - ResponseTemplates:
            application/json: |-
              {
                  "type": "InternalServerError",
                  "message": "The backend server encountered an internal error."
              }
          SelectionPattern: (\n|.)+
          StatusCode: '500'
        - ResponseTemplates:
            application/json: |-
              {
                  "type": "InternalServerTimeout",
                  "message": "The backend server did not respond quickly enough."
              }
          SelectionPattern: ".*Task timed out after .*"
          StatusCode: '504'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json:
            Fn::Sub: |-
              #set($allParams = $input.params())
              {
                  "request-body": $input.json("$"),
                  "request-params" : {
                      #foreach($type in $allParams.keySet())
                      #set($params = $allParams.get($type))
                      "$type" : {
                          #foreach($paramName in $params.keySet())
                          "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                          #if($foreach.hasNext),#end
                          #end
                      }
                      #if($foreach.hasNext),#end
                      #end
                  },
                  "api-id": "$context.apiId",
                  "resource-path": "$context.resourcePath",
                  "stage": "$context.stage"
              }
        Type: AWS
        Uri:
          Fn::Sub:
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RoomMessagePosterFunctionArn}/invocations
          - RoomMessagePosterFunctionArn:
              Fn::GetAtt:
              - RoomMessagePosterFunction
              - Arn
      MethodResponses:
      - StatusCode: '200'
      - StatusCode: '400'
      - StatusCode: '500'
      - StatusCode: '504'
      RequestParameters:
        method.request.querystring.user-id: true
    DependsOn:
    - WebChatApiRoomMessagePostMethodRoomMessagePosterLambdaPermission
  
  WebChatApiRoomMessagePostMethodRoomMessagePosterLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomMessagePosterFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/*/POST/room/{room-id}/message
    DependsOn:
    - RoomMessagePosterFunctionRoleActions
    - RoomMessagePosterFunctionLogGroup
  
  PreWarmApiCloudWatchRoomMessagePosterFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: PreWarmingEnabledCondition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomMessagePosterFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - PreWarmApiEventRule
        - Arn
    DependsOn:
    - RoomMessagePosterFunctionRoleActions
    - RoomMessagePosterFunctionLogGroup
  
  
  
  
  #
  #   CloudWatch Alarms
  #
  
  AdminAlarmTopic:
    Type: AWS::SNS::Topic
    Condition: IncludeMetricAlarmsCondition
    Properties:
      Subscription:
      - Endpoint:
          Ref: MetricAlarmEmailAddress
        Protocol: email
  
  LambdaThrottlesAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IncludeMetricAlarmsCondition
    Properties:
      Namespace: AWS/Lambda
      MetricName: Throttles
      EvaluationPeriods: 1
      Period: 60
      Statistic: Sum
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
      - Ref: AdminAlarmTopic
  
  RoomGeneratorErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IncludeMetricAlarmsCondition
    Properties:
      Namespace: AWS/Lambda
      Dimensions:
      - Name: FunctionName
        Value:
          Ref: RoomGeneratorFunction
      MetricName: Errors
      EvaluationPeriods: 1
      Period: 60
      Statistic: Sum
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
      - Ref: AdminAlarmTopic
  
  Api5XXErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IncludeMetricAlarmsCondition
    Properties:
      Namespace: AWS/ApiGateway
      Dimensions:
      - Name: ApiName
        Value:
          Ref: AWS::StackName
      - Name: Stage
        Value:
          Ref: WebChatApiStage
      MetricName: 5XXError
      EvaluationPeriods: 1
      Period: 60
      Statistic: Average
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
      - Ref: AdminAlarmTopic
  
  #
  #   Pre-Warming
  #
  
  PreWarmApiEventRule:
    Type: AWS::Events::Rule
    Condition: PreWarmingEnabledCondition
    Properties:
      Description: Keeps web chat API Lambda functions warm by invoking them frequently.
      ScheduleExpression:
        Fn::FindInMap:
        - StaticVariables
        - Main
        - PreWarmScheduleExpression
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - RoomGeneratorFunction
          - Arn
        Id: RoomGeneratorFunction
        Input: |-
          {
              "warming": true
          }
      - Arn:
          Fn::GetAtt:
          - UserIdGeneratorFunction
          - Arn
        Id: UserIdGeneratorFunction
        Input: |-
          {
              "warming": true
          }
      - Arn:
          Fn::GetAtt:
          - RoomMessagePollerFunction
          - Arn
        Id: RoomMessagePollerFunction
        Input: |-
          {
              "warming": true
          }
      - Arn:
          Fn::GetAtt:
          - RoomMessagePosterFunction
          - Arn
        Id: RoomMessagePosterFunction
        Input: |-
          {
              "warming": true
          }
      - Arn:
          Fn::GetAtt:
          - RoomSessionGeneratorFunction
          - Arn
        Id: RoomSessionGeneratorFunction
        Input: |-
          {
              "warming": true
          }
          
  PreWarmApiEventRule2:
    Type: AWS::Events::Rule
    Condition: PreWarmingEnabledCondition
    Properties:
      Description: Keeps web chat API Lambda functions warm by invoking them frequently.
      ScheduleExpression:
        Fn::FindInMap:
        - StaticVariables
        - Main
        - PreWarmScheduleExpression
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - RoomMessageAcknowledgerFunction
          - Arn
        Id: RoomMessageAcknowledgerFunction
        Input: |-
          {
              "warming": true
          }
  
  #
  #   Stack Cleanup
  #   
  #   This function performs basic setup and cleanup functionality when the 
  #   stack is deleted.
  #   
  #   On delete:
  #     - Clears out shared S3 bucket
  #     - Deletes SNS topics
  #
  
  StackCleanupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Queues up Lambda function invocations for later execution.
      Handler: index.lambda_handler
      MemorySize: 1024
      Role:
        Fn::GetAtt:
        - StackCleanupFunctionRole
        - Arn
      Code:
        S3Bucket:
          Fn::ImportValue:
            Fn::Sub: '${LambdaPackageStackName}-S3Bucket'
        S3Key: lambda/StackCleanupFunction.zip
      Runtime: python2.7
      Timeout: '300'
  
  StackCleanupFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  
  StackCleanupFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: StackCleanupFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${StackCleanupFunction}:log-stream:*
        - Effect: Allow
          Action:
          - logs:DeleteLogGroup
          Resource: 
            Fn::Sub:
            - arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:sns/${AWS::Region}/${AWS::AccountId}/web-chat-${WebChatApi}-${WebChatApiStageName}-*
            - WebChatApiStageName:
                Fn::FindInMap:
                - StaticVariables
                - Main
                - StageName
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:DeleteObject
          Resource:
            Fn::Sub: arn:aws:s3:::${SharedBucket}/*
        - Effect: Allow
          Action:
          - s3:ListBucket
          Resource:
            Fn::Sub: arn:aws:s3:::${SharedBucket}
      Roles:
      - Ref: StackCleanupFunctionRole
  
  StackCleanupFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${StackCleanupFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  StackCleanupInvocation:
    Type: Custom::StackCleanupInvocation
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - StackCleanupFunction
        - Arn
      SharedBucket:
        Ref: SharedBucket
    DependsOn:
    - StackCleanupFunctionLogGroup
    - StackCleanupFunctionRoleActions
      
Outputs:
  WebChatApiHome:
    Value:
      Fn::Sub:
      - https://${WebChatApi}.execute-api.${AWS::Region}.amazonaws.com/${MainStageName}
      - MainStageName:
          Fn::FindInMap:
          - StaticVariables
          - Main
          - StageName
