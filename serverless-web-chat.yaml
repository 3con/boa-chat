---
AWSTemplateFormatVersion: '2010-09-09'
Description: A serverless web chat portal.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Configuration
      Parameters:
      - MetricAlarmEmailAddress
      - MaxRequestsPerSecond
      - PreWarmingEnabled
      - LogRetentionDays
    ParameterLabels:
      MetricAlarmEmailAddress:
        default: Alarm E-mail Address
      LogRetentionDays:
        default: Log Retention (days)
      PreWarmingEnabled:
        default: Pre-Warming Enabled
Parameters:
  LogRetentionDays:
    Type: String
    Default: '14'
    AllowedValues:
    - ''
    - '1'
    - '3'
    - '5'
    - '7'
    - '14'
    - '30'
    - '60'
    - '90'
    - '120'
    - '150'
    - '180'
    - '365'
    - '400'
    - '545'
    - '731'
    - '1827'
    - '3653'
  MetricAlarmEmailAddress:
    Type: String
    Description: In case of errors. Leave blank to disable.
  PreWarmingEnabled:
    Type: String
    Description: Ping resources each minute to keep initial response times fast.
    Default: 'Yes'
    AllowedValues:
    - 'Yes'
    - 'No'
Mappings:
  StaticVariables:
    Main:
      ApiGatewayErrorMappingTemplate: |-
        #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
        #set ($bodyObj = $util.parseJson($input.body))
        {
            "message": "$util.escapeJavaScript("$errorMessageObj.message")"
        }
      DummyStageName: DummyStage
      PreWarmScheduleExpression: rate(1 minute)
      StageName: v1
Conditions:
  IncludeMetricAlarmsCondition:
    Fn::Not:
    - Fn::Equals:
      - Ref: MetricAlarmEmailAddress
      - ''
  PreWarmingEnabledCondition:
    Fn::Equals:
    - Ref: PreWarmingEnabled
    - 'Yes'
Resources:
  
  #
  #   S3 Bucket
  #   
  #   Shared among various resources.
  #
  
  SharedBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName:
        Fn::Sub: "webchat-sharedbucket-${WebChatApi}"
  
  #  
  #   API Gateway - Global Account resources
  #  
  
  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
        - ApiGatewayCloudWatchRole
        - Arn
  
  #  
  #   API Gateway - REST API resources
  #  
  
  WebChatApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Ref: AWS::StackName
      Description: REST API for web chats.
  
  WebChatApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: WebChatApi
      StageName:
        Fn::FindInMap:
        - StaticVariables
        - Main
        - DummyStageName
    DependsOn:
    - WebChatApiDummyStageLogGroup
    - WebChatApiRoomCreateMethod
    - WebChatApiUserIdCreateMethod
    - WebChatApiRoomMessageGetMethod
    - WebChatApiRoomMessagePostMethod
  
  WebChatApiDummyStageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub:
        - API-Gateway-Execution-Logs_${WebChatApi}/${DummyStageName}
        - DummyStageName:
            Fn::FindInMap:
            - StaticVariables
            - Main
            - DummyStageName
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: WebChatApiDeployment
      MethodSettings:
      - ResourcePath: ''
        HttpMethod: "*/*"
        DataTraceEnabled: true
        LoggingLevel: INFO
        MetricsEnabled:
          Fn::If:
          - IncludeMetricAlarmsCondition
          - true
          - false
      RestApiId:
        Ref: WebChatApi
      StageName:
        Fn::FindInMap:
        - StaticVariables
        - Main
        - StageName
    DependsOn:
    - WebChatApiMainStageLogGroup
  
  WebChatApiMainStageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub:
        - API-Gateway-Execution-Logs_${WebChatApi}/${MainStageName}
        - MainStageName:
            Fn::FindInMap:
            - StaticVariables
            - Main
            - StageName
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiRoomResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - WebChatApi
        - RootResourceId
      PathPart: room
      RestApiId:
        Ref: WebChatApi
  
  WebChatApiSingleRoomResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: WebChatApiRoomResource
      PathPart: '{room-id}'
      RestApiId:
        Ref: WebChatApi
  
  WebChatApiSingleRoomMessageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: WebChatApiSingleRoomResource
      PathPart: 'message'
      RestApiId:
        Ref: WebChatApi
  
  WebChatApiUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - WebChatApi
        - RootResourceId
      PathPart: user
      RestApiId:
        Ref: WebChatApi
  
  #  
  #   Room Generator Function
  #  
    
  RoomGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Generates a unique identifier for a chat room.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - RoomGeneratorFunctionRole
        - Arn
      Code:
        ZipFile: |-
          from __future__ import print_function
          
          import json, uuid, time
          import boto3
          
          def lambda_handler(event, context):
              print("Event: {}".format(json.dumps(event)))
              
              if "warming" in event and "{}".format(event["warming"]).lower() == "true":
                  return {
                      "message": "Warmed!"
                  }
              
              public_api_base = get_public_api_base(event)
              
              new_room_id = generate_new_room_id()
              
              new_topic_name = generate_room_sns_topic_name(event, new_room_id)
              
              sns_response = boto3.client("sns").create_topic(
                  Name = new_topic_name
              )
              
              topic_arn = sns_response["TopicArn"]
              
              s3_room_config_object = {
                  "created": int(time.time()),
                  "sns-topic-arn": topic_arn
              }
              
              s3_bucket_name = "webchat-sharedbucket-{}".format(event["api-id"])
              
              boto3.client("s3").put_object(
                  Bucket = s3_bucket_name,
                  Key = "room-topics/{}.json".format(new_room_id),
                  Body = json.dumps(s3_room_config_object, indent=4)
              )
              
              return {
                  "room": "{}{}/{}".format(
                      public_api_base,
                      event["resource-path"],
                      new_room_id
                  )
              }
          
          def generate_room_sns_topic_name(event, room_id):
              return "web-chat-{}-{}-{}".format(
                  event["api-id"],
                  event["stage"],
                  room_id
              )
          
          def generate_new_room_id():
              return "{}".format(uuid.uuid4())
          
          def get_public_api_base(event):
              
              # https://forums.aws.amazon.com/thread.jspa?threadID=241370
              
              if event["host"].endswith(".amazonaws.com"):
                  # Assume this is the default deployment URL.
                  return "https://{}/{}".format(
                      event["host"],
                      event["stage"]
                  )
              
              # The host header indicates this is invoked through a custom domain name.
              # Look up the base path mapping based on our stage.
              # Note that this will be imperfect because a stage can have multiple base path mappings.
              
              response_iterator = boto3.client("apigateway").get_paginator("get_base_path_mappings").paginate(
                  domainName = event["host"]
              )
              
              own_mapping = None
              
              for each_response in response_iterator:
                  for each_item in each_response.get("items"):
                      if each_item["restApiId"] == event["api-id"] and each_item.get("stage", "") in ["", event["stage"]]:
                          if own_mapping is not None:
                              raise Exception("Ambiguous base path mapping. Can't determine base path of API.")
                          own_mapping = each_item
              
              if own_mapping is None:
                  raise Exception("Unable to determine API's public URL.")
              
              base_path = own_mapping["basePath"]
              
              if own_mapping.get("stage", "") == "":
                  base_path += "/" + event["stage"]
              
              return "https://{}/{}".format(
                  event["host"],
                  base_path
              )
          
      Runtime: python2.7
      Timeout: '300'
  
  RoomGeneratorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  
  RoomGeneratorFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RoomGeneratorFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${RoomGeneratorFunction}:log-stream:*
        - Effect: Allow
          Action: 
          - sns:CreateTopic
          Resource: '*'
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
            Fn::Sub: arn:aws:s3:::${SharedBucket}/room-topics/*
        - Effect: Allow
          Action:
          - apigateway:GET
          Resource:
            Fn::Sub: arn:aws:apigateway:${AWS::Region}::/domainnames/*/basepathmappings
      Roles:
      - Ref: RoomGeneratorFunctionRole
  
  RoomGeneratorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${RoomGeneratorFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiRoomCreateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiRoomResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - SelectionPattern: ''
          StatusCode: '200'
        - ResponseTemplates:
            application/json: |-
              {
                  "type": "InternalServerError",
                  "message": "The backend server encountered an internal error."
              }
          SelectionPattern: (\n|.)+
          StatusCode: '500'
        - ResponseTemplates:
            application/json: |-
              {
                  "type": "InternalServerTimeout",
                  "message": "The backend server did not respond quickly enough."
              }
          SelectionPattern: ".*Task timed out after .*"
          StatusCode: '504'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json:
            Fn::Sub: |-
              {
                  "api-id": "$context.apiId",
                  "host": "$input.params('Host')",
                  "stage": "$context.stage",
                  "request-body": $input.json("$"),
                  "resource-path": "$context.resourcePath"
              }
        Type: AWS
        Uri:
          Fn::Sub:
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RoomGeneratorFunctionArn}/invocations
          - RoomGeneratorFunctionArn:
              Fn::GetAtt:
              - RoomGeneratorFunction
              - Arn
      MethodResponses:
      - StatusCode: '200'
      - StatusCode: '500'
      - StatusCode: '504'
      RequestParameters:
        method.request.header.Host: false
    DependsOn:
    - WebChatApiRoomCreateMethodRoomGeneratorLambdaPermission
  
  WebChatApiRoomCreateMethodRoomGeneratorLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomGeneratorFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/*/POST/room
    DependsOn:
    - RoomGeneratorFunctionRoleActions
    - RoomGeneratorFunctionLogGroup
  
  PreWarmApiCloudWatchRoomGeneratorFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: PreWarmingEnabledCondition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomGeneratorFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - PreWarmApiEventRule
        - Arn
    DependsOn:
    - RoomGeneratorFunctionRoleActions
    - RoomGeneratorFunctionLogGroup
  
  
  #  
  #   User ID Generator Function
  #  
    
  UserIdGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Generates a unique identifier for a user.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - UserIdGeneratorFunctionRole
        - Arn
      Code:
        ZipFile: |-
          from __future__ import print_function
          
          import json, uuid, time
          import boto3
          
          def lambda_handler(event, context):
              print("Event: {}".format(json.dumps(event)))
              
              if "warming" in event and "{}".format(event["warming"]).lower() == "true":
                  return {
                      "message": "Warmed!"
                  }
              
              public_api_base = get_public_api_base(event)
              
              new_user_id = generate_new_user_id()
              
              return {
                  "user-id": new_user_id,
                  "user": "{}{}/{}".format(
                      public_api_base,
                      event["resource-path"],
                      new_user_id
                  )
              }
          
          def generate_new_user_id():
              return "{}".format(uuid.uuid4())
          
          def get_public_api_base(event):
              
              # https://forums.aws.amazon.com/thread.jspa?threadID=241370
              
              if event["host"].endswith(".amazonaws.com"):
                  # Assume this is the default deployment URL.
                  return "https://{}/{}".format(
                      event["host"],
                      event["stage"]
                  )
              
              # The host header indicates this is invoked through a custom domain name.
              # Look up the base path mapping based on our stage.
              # Note that this will be imperfect because a stage can have multiple base path mappings.
              
              response_iterator = boto3.client("apigateway").get_paginator("get_base_path_mappings").paginate(
                  domainName = event["host"]
              )
              
              own_mapping = None
              
              for each_response in response_iterator:
                  for each_item in each_response.get("items"):
                      if each_item["restApiId"] == event["api-id"] and each_item.get("stage", "") in ["", event["stage"]]:
                          if own_mapping is not None:
                              raise Exception("Ambiguous base path mapping. Can't determine base path of API.")
                          own_mapping = each_item
              
              if own_mapping is None:
                  raise Exception("Unable to determine API's public URL.")
              
              base_path = own_mapping["basePath"]
              
              if own_mapping.get("stage", "") == "":
                  base_path += "/" + event["stage"]
              
              return "https://{}/{}".format(
                  event["host"],
                  base_path
              )
          
      Runtime: python2.7
      Timeout: '300'
  
  UserIdGeneratorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  
  UserIdGeneratorFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: UserIdGeneratorFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${UserIdGeneratorFunction}:log-stream:*
        - Effect: Allow
          Action:
          - apigateway:GET
          Resource:
            Fn::Sub: arn:aws:apigateway:${AWS::Region}::/domainnames/*/basepathmappings
      Roles:
      - Ref: UserIdGeneratorFunctionRole
  
  UserIdGeneratorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${UserIdGeneratorFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiUserIdCreateMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiUserResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - SelectionPattern: ''
          StatusCode: '200'
        - ResponseTemplates:
            application/json: |-
              {
                  "type": "InternalServerError",
                  "message": "The backend server encountered an internal error."
              }
          SelectionPattern: (\n|.)+
          StatusCode: '500'
        - ResponseTemplates:
            application/json: |-
              {
                  "type": "InternalServerTimeout",
                  "message": "The backend server did not respond quickly enough."
              }
          SelectionPattern: ".*Task timed out after .*"
          StatusCode: '504'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json:
            Fn::Sub: |-
              {
                  "api-id": "$context.apiId",
                  "host": "$input.params('Host')",
                  "stage": "$context.stage",
                  "request-body": $input.json("$"),
                  "resource-path": "$context.resourcePath"
              }
        Type: AWS
        Uri:
          Fn::Sub:
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserIdGeneratorFunctionArn}/invocations
          - UserIdGeneratorFunctionArn:
              Fn::GetAtt:
              - UserIdGeneratorFunction
              - Arn
      MethodResponses:
      - StatusCode: '200'
      - StatusCode: '500'
      - StatusCode: '504'
      RequestParameters:
        method.request.header.Host: true
    DependsOn:
    - WebChatApiUserIdCreateMethodUserIdGeneratorLambdaPermission
  
  WebChatApiUserIdCreateMethodUserIdGeneratorLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: UserIdGeneratorFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/*/POST/user
    DependsOn:
    - UserIdGeneratorFunctionRoleActions
    - UserIdGeneratorFunctionLogGroup
  
  PreWarmApiCloudWatchUserIdGeneratorFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: PreWarmingEnabledCondition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: UserIdGeneratorFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - PreWarmApiEventRule
        - Arn
    DependsOn:
    - UserIdGeneratorFunctionRoleActions
    - UserIdGeneratorFunctionLogGroup
  
  
  
  #  
  #   Room Message Poller Function
  #  
    
  RoomMessagePollerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Returns any new messages sent to the requested room.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - RoomMessagePollerFunctionRole
        - Arn
      Code:
        ZipFile: |-
          from __future__ import print_function
          
          import json, time, hashlib, boto3
          
          queue_url_cache = {}
          sqs_client = boto3.client("sqs")
          s3_client = boto3.client("s3")
          
          def lambda_handler(event, context):
              print("Event: {}".format(json.dumps(event)))
              
              if "warming" in event and "{}".format(event["warming"]).lower() == "true":
                  return {
                      "message": "Warmed!"
                  }
              
              if event.get("user-id", "") == "":
                  raise APIGatewayException("URL parameter \"user-id\" is required.", 400)
              
              sqs_queue_name = get_queue_name(event)
              if sqs_queue_name not in queue_url_cache:
                  create_and_initialize_queue(sqs_queue_name, event)
              
              queue_url = queue_url_cache[sqs_queue_name]
              
              response = sqs_client.receive_message(
                  QueueUrl = queue_url,
                  MaxNumberOfMessages = 10,
                  WaitTimeSeconds = 20
              )
              
              return {
                  "messages": list(x["Body"] for x in response.get("Messages", []))
              }
          
          def create_and_initialize_queue(sqs_queue_name, event):
              s3_bucket_name = "webchat-sharedbucket-{}".format(event["api-id"])
              room_info_dict = json.loads(s3_client.get_object(Bucket=s3_bucket_name, Key="room-topics/{}.json".format(event["room-id"]))["Body"].read())
              sns_topic_arn = room_info_dict["sns-topic-arn"]
              
              queue_url = sqs_client.create_queue(
                  QueueName = sqs_queue_name,
                  Attributes = get_default_queue_attributes(event, sns_topic_arn)
              )["QueueUrl"]
              
              queue_arn = sqs_client.get_queue_attributes(QueueUrl=queue_url, AttributeNames=["QueueArn"])["Attributes"]["QueueArn"]
              
              subscribe_response = boto3.client("sns").subscribe(
                  TopicArn = sns_topic_arn,
                  Protocol = "sqs",
                  Endpoint = queue_arn
              )
              
              s3_queue_config_object = {
                  "created": int(time.time()),
                  "sqs-queue-url": queue_url,
                  "sns-subscription-arn": subscribe_response["SubscriptionArn"]
              }
          
              s3_client.put_object(
                  Bucket = s3_bucket_name,
                  Key = "room-queues/{}/{}.json".format(
                      event["room-id"],
                      event["user-id"]
                  ),
                  Body = json.dumps(s3_queue_config_object, indent=4)
              )
              
              queue_url_cache[sqs_queue_name] = queue_url
          
          def get_queue_name(event):
              
              hash_string_base = "{}-{}-{}-{}".format(
                  event["api-id"],
                  event["stage"],
                  event["room-id"],
                  event["user-id"]
              )
              
              return "web-chat-{}".format(
                  hashlib.md5(hash_string_base).hexdigest()
              )
          
          def get_default_queue_attributes(event, sns_topic_arn):
              
              statements_list = [
                  {
                      "Sid": "AllowSNSRoomTopicSending",
                      "Effect": "Allow",
                      "Principal": "*",
                      "Action": "sqs:SendMessage",
                      "Resource": "*",
                      "Condition": {
                          "ArnEquals": {
                              "aws:SourceArn": sns_topic_arn
                          }
                      }
                  },
                  {
                      "Sid": "AllowRoomPollerActions",
                      "Effect": "Allow",
                      "Principal": {
                          "AWS": event["function-role"]
                      },
                      "Action": [
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Sid": "AllowCleanup",
                      "Effect": "Allow",
                      "Principal": {
                          "AWS": event["delete-function-role"]
                      },
                      "Action": "sqs:DeleteQueue",
                      "Resource": "*"
                  }
              ]
              
              return {
                  "Policy": json.dumps({
                      "Version": "2012-10-17",
                      "Statement": statements_list
                  })
              }
          
          class APIGatewayException(Exception):
    
              def __init__(self, message, http_status_code = 500):
        
                  # Encode this exception as a JSON object so it can be decoded by API Gateway.
                  new_message_object = {
                      "http-status": http_status_code,
                      "message": message
                  }
                  new_message = json.dumps(new_message_object, separators=(",", ":"))
                  Exception.__init__(self, new_message)
          
      Runtime: python2.7
      Timeout: '300'
  
  RoomMessagePollerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  
  RoomMessagePollerFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RoomMessagePollerFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${RoomMessagePollerFunction}:log-stream:*
        - Effect: Allow
          Action:
          - sqs:CreateQueue
          - sqs:GetQueueAttributes
          Resource: '*'
        - Effect: Allow
          Action:
          - sns:Subscribe
          Resource:
            Fn::Sub:
            - arn:aws:sns:${AWS::Region}:${AWS::AccountId}:web-chat-${WebChatApi}-${WebChatApiStageName}-*
            - WebChatApiStageName:
                Fn::FindInMap:
                - StaticVariables
                - Main
                - StageName
        - Effect: Allow
          Action:
          - s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${SharedBucket}/room-topics/*
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
            Fn::Sub: arn:aws:s3:::${SharedBucket}/room-queues/*
        - Effect: Allow
          Action:
          - apigateway:GET
          Resource:
            Fn::Sub: arn:aws:apigateway:${AWS::Region}::/domainnames/*/basepathmappings
      Roles:
      - Ref: RoomMessagePollerFunctionRole
  
  RoomMessagePollerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${RoomMessagePollerFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiRoomMessageGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiSingleRoomMessageResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - SelectionPattern: ''
          StatusCode: '200'
        - ResponseTemplates:
            application/json:
              Fn::FindInMap:
              - StaticVariables
              - Main
              - ApiGatewayErrorMappingTemplate
          SelectionPattern: '.*http-status\":\w*400.*'
          StatusCode: '400'
        - ResponseTemplates:
            application/json: |-
              {
                  "type": "InternalServerError",
                  "message": "The backend server encountered an internal error."
              }
          SelectionPattern: (\n|.)+
          StatusCode: '500'
        - ResponseTemplates:
            application/json: |-
              {
                  "type": "InternalServerTimeout",
                  "message": "The backend server did not respond quickly enough."
              }
          SelectionPattern: ".*Task timed out after .*"
          StatusCode: '504'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json:
            Fn::Sub: 
            - |-
              {
                  "api-id": "$context.apiId",
                  "delete-function-role": "${CleanupFunctionRole}",
                  "function-role": "${PollerFunctionRole}",
                  "host": "$input.params('Host')",
                  "request-body": $input.json("$"),
                  "resource-path": "$context.resourcePath",
                  "room-id": "$input.params('room-id')",
                  "stage": "$context.stage",
                  "user-id": "$input.params('user-id')"
              }
            - PollerFunctionRole:
                Fn::GetAtt:
                - RoomMessagePollerFunctionRole
                - Arn
              CleanupFunctionRole:
                Fn::GetAtt:
                - StackCleanupFunctionRole
                - Arn
        Type: AWS
        Uri:
          Fn::Sub:
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RoomMessagePollerFunctionArn}/invocations
          - RoomMessagePollerFunctionArn:
              Fn::GetAtt:
              - RoomMessagePollerFunction
              - Arn
      MethodResponses:
      - StatusCode: '200'
      - StatusCode: '400'
      - StatusCode: '500'
      - StatusCode: '504'
      RequestParameters:
        method.request.header.Host: true
        method.request.querystring.user-id: true
    DependsOn:
    - WebChatApiRoomMessageGetMethodRoomMessagePollerLambdaPermission
  
  WebChatApiRoomMessageGetMethodRoomMessagePollerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomMessagePollerFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/*/GET/room/{room-id}/message
    DependsOn:
    - RoomMessagePollerFunctionRoleActions
    - RoomMessagePollerFunctionLogGroup
  
  PreWarmApiCloudWatchRoomMessagePollerFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: PreWarmingEnabledCondition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomMessagePollerFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - PreWarmApiEventRule
        - Arn
    DependsOn:
    - RoomMessagePollerFunctionRoleActions
    - RoomMessagePollerFunctionLogGroup
  
  
  
  #  
  #   Room Message Poster Function
  #  
    
  RoomMessagePosterFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Returns any new messages sent to the requested room.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - RoomMessagePosterFunctionRole
        - Arn
      Code:
        ZipFile: |-
          from __future__ import print_function
          
          import json
          
          def lambda_handler(event, context):
              print("Event: {}".format(json.dumps(event)))
              
              if "warming" in event and "{}".format(event["warming"]).lower() == "true":
                  return {
                      "message": "Warmed!"
                  }
              
              raise NotImplementedError
              
              return {}
          
      Runtime: python2.7
      Timeout: '300'
  
  RoomMessagePosterFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  
  RoomMessagePosterFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RoomMessagePosterFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${RoomMessagePosterFunction}:log-stream:*
        - Effect: Allow
          Action:
          - apigateway:GET
          Resource:
            Fn::Sub: arn:aws:apigateway:${AWS::Region}::/domainnames/*/basepathmappings
      Roles:
      - Ref: RoomMessagePosterFunctionRole
  
  RoomMessagePosterFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${RoomMessagePosterFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  WebChatApiRoomMessagePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      ResourceId:
        Ref: WebChatApiSingleRoomMessageResource
      RestApiId:
        Ref: WebChatApi
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - SelectionPattern: ''
          StatusCode: '200'
        - ResponseTemplates:
            application/json: |-
              {
                  "type": "InternalServerError",
                  "message": "The backend server encountered an internal error."
              }
          SelectionPattern: (\n|.)+
          StatusCode: '500'
        - ResponseTemplates:
            application/json: |-
              {
                  "type": "InternalServerTimeout",
                  "message": "The backend server did not respond quickly enough."
              }
          SelectionPattern: ".*Task timed out after .*"
          StatusCode: '504'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json:
            Fn::Sub: |-
              {
                  "api-id": "$context.apiId",
                  "host": "$input.params('Host')",
                  "stage": "$context.stage",
                  "request-body": $input.json("$"),
                  "resource-path": "$context.resourcePath"
              }
        Type: AWS
        Uri:
          Fn::Sub:
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RoomMessagePosterFunctionArn}/invocations
          - RoomMessagePosterFunctionArn:
              Fn::GetAtt:
              - RoomMessagePosterFunction
              - Arn
      MethodResponses:
      - StatusCode: '200'
      - StatusCode: '500'
      - StatusCode: '504'
      RequestParameters:
        method.request.header.Host: true
    DependsOn:
    - WebChatApiRoomMessagePostMethodRoomMessagePosterLambdaPermission
  
  WebChatApiRoomMessagePostMethodRoomMessagePosterLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomMessagePosterFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebChatApi}/*/POST/room/{room-id}/message
    DependsOn:
    - RoomMessagePosterFunctionRoleActions
    - RoomMessagePosterFunctionLogGroup
  
  PreWarmApiCloudWatchRoomMessagePosterFunctionLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: PreWarmingEnabledCondition
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: RoomMessagePosterFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - PreWarmApiEventRule
        - Arn
    DependsOn:
    - RoomMessagePosterFunctionRoleActions
    - RoomMessagePosterFunctionLogGroup
  
  
  
  
  #
  #   CloudWatch Alarms
  #
  
  AdminAlarmTopic:
    Type: AWS::SNS::Topic
    Condition: IncludeMetricAlarmsCondition
    Properties:
      Subscription:
      - Endpoint:
          Ref: MetricAlarmEmailAddress
        Protocol: email
  
  LambdaThrottlesAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IncludeMetricAlarmsCondition
    Properties:
      Namespace: AWS/Lambda
      MetricName: Throttles
      EvaluationPeriods: 1
      Period: 60
      Statistic: Sum
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
      - Ref: AdminAlarmTopic
  
  RoomGeneratorErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IncludeMetricAlarmsCondition
    Properties:
      Namespace: AWS/Lambda
      Dimensions:
      - Name: FunctionName
        Value:
          Ref: RoomGeneratorFunction
      MetricName: Errors
      EvaluationPeriods: 1
      Period: 60
      Statistic: Sum
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
      - Ref: AdminAlarmTopic
  
  Api5XXErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IncludeMetricAlarmsCondition
    Properties:
      Namespace: AWS/ApiGateway
      Dimensions:
      - Name: ApiName
        Value:
          Ref: AWS::StackName
      - Name: Stage
        Value:
          Ref: WebChatApiStage
      MetricName: 5XXError
      EvaluationPeriods: 1
      Period: 60
      Statistic: Average
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
      - Ref: AdminAlarmTopic
  
  #
  #   Pre-Warming
  #
  
  PreWarmApiEventRule:
    Type: AWS::Events::Rule
    Condition: PreWarmingEnabledCondition
    Properties:
      Description: Keeps web chat API Lambda functions warm by invoking them frequently.
      ScheduleExpression:
        Fn::FindInMap:
        - StaticVariables
        - Main
        - PreWarmScheduleExpression
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - RoomGeneratorFunction
          - Arn
        Id: RoomGeneratorFunction
        Input: |-
          {
              "warming": true
          }
      - Arn:
          Fn::GetAtt:
          - UserIdGeneratorFunction
          - Arn
        Id: UserIdGeneratorFunction
        Input: |-
          {
              "warming": true
          }
      - Arn:
          Fn::GetAtt:
          - RoomMessagePollerFunction
          - Arn
        Id: RoomMessagePollerFunction
        Input: |-
          {
              "warming": true
          }
      - Arn:
          Fn::GetAtt:
          - RoomMessagePosterFunction
          - Arn
        Id: RoomMessagePosterFunction
        Input: |-
          {
              "warming": true
          }
  
  #
  #   Stack Cleanup
  #   
  #   This function performs basic setup and cleanup functionality when the 
  #   stack is deleted.
  #   
  #   On delete:
  #     - Clears out shared S3 bucket
  #     - Deletes SNS topics
  #
  
  StackCleanupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Queues up Lambda function invocations for later execution.
      Handler: index.lambda_handler
      MemorySize: 1024
      Role:
        Fn::GetAtt:
        - StackCleanupFunctionRole
        - Arn
      Code:
        ZipFile: |-
          from __future__ import print_function

          import json
          import boto3, botocore
          import cfnresponse

          class LambdaHandler(object):
              
              def __init__(self, context):
                  pass
  
              def handle_event(self, event, context):
                  print("Event: {}".format(json.dumps(event)))
        
                  request_type = event.get("RequestType")
        
                  if request_type == "Delete":
                      self.handle_cleanup_event(event, context)
        
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, None)
        
                  return {}
    
              def handle_cleanup_event(self, event, context):
        
                  s3_client = boto3.client("s3")
                  sns_client = boto3.client("sns")
                  sqs_client = boto3.client("sqs")
                  s3_bucket_name = event["ResourceProperties"]["SharedBucket"]
        
                  paginator = s3_client.get_paginator("list_objects_v2")
        
                  response_iterator = paginator.paginate(
                      Bucket = s3_bucket_name
                  )
        
                  for each_list_response in response_iterator:
                    keys_to_delete = []
          
                    for each_item in each_list_response.get("Contents", []):
                        keys_to_delete.append(each_item["Key"])
          
                    if len(keys_to_delete) == 0:
                        print("Last request for objects in {} returned none.".format(
                            s3_bucket_name
                        ))
                        break
                    
                    for each_key in keys_to_delete:
                        if each_key.startswith("room-topics/"):
                            # This S3 object represents an SNS topic that needs to be deleted.
                            room_topic_config = json.loads(s3_client.get_object(Bucket = s3_bucket_name, Key = each_key)["Body"].read())
                            sns_topic_arn = room_topic_config["sns-topic-arn"]
                            sns_client.delete_topic(TopicArn = sns_topic_arn)
                        
                        elif each_key.startswith("room-queues/"):
                            # This S3 object represents an SQS queue that needs to be deleted.
                            queue_config = json.loads(s3_client.get_object(Bucket = s3_bucket_name, Key = each_key)["Body"].read())
                            sqs_queue_url = queue_config["sqs-queue-url"]
                            try:
                                sqs_client.delete_queue(QueueUrl = sqs_queue_url)
                            except botocore.exceptions.ClientError as e:
                                if e.response["Error"]["Code"] == "AWS.SimpleQueueService.NonExistentQueue":
                                    pass
                                else:
                                    raise
                    
                    print("Deleting {} object(s) from {}.".format(
                        len(keys_to_delete),
                        s3_bucket_name
                    ))
          
                    s3_client.delete_objects(
                        Bucket = s3_bucket_name,
                        Delete = {
                            "Objects": list({"Key": x} for x in keys_to_delete)
                        }
                    )
          
                    print("Object(s) deleted.")

          handler_object = None
          def lambda_handler(event, context):
              global handler_object
    
              if handler_object is None:
                  handler_object = LambdaHandler(context)
    
              return handler_object.handle_event(event, context)
              
      Runtime: python2.7
      Timeout: '300'
  
  StackCleanupFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  
  StackCleanupFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: StackCleanupFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${StackCleanupFunction}:log-stream:*
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:DeleteObject
          Resource:
            Fn::Sub: arn:aws:s3:::${SharedBucket}/*
        - Effect: Allow
          Action:
          - s3:ListBucket
          Resource:
            Fn::Sub: arn:aws:s3:::${SharedBucket}
        - Effect: Allow
          Action:
          - sns:DeleteTopic
          - sqs:DeleteQueue
          Resource: '*'
      Roles:
      - Ref: StackCleanupFunctionRole
  
  StackCleanupFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${StackCleanupFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  StackCleanupInvocation:
    Type: Custom::StackCleanupInvocation
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - StackCleanupFunction
        - Arn
      SharedBucket:
        Ref: SharedBucket
    DependsOn:
    - StackCleanupFunctionLogGroup
    - StackCleanupFunctionRoleActions
      
Outputs:
  WebChatApiHome:
    Value:
      Fn::Sub:
      - https://${WebChatApi}.execute-api.${AWS::Region}.amazonaws.com/${MainStageName}/
      - MainStageName:
          Fn::FindInMap:
          - StaticVariables
          - Main
          - StageName
